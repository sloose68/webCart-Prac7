import{cw as l,cx as h,ai as g,aw as w,cy as f,cz as u,cA as n,a2 as d,a4 as V}from"./index-Ccrt8twN.js";import{S as b,u as S}from"./LayerView-DVZYonH7.js";import{t as _}from"./GraphicContainer-BykXYatN.js";import{O as T}from"./GraphicsView2D-QF1qkWwP.js";import"./Container-Cd3Te_aR.js";import"./layerViewUtils-Db2jmMIF.js";import"./AGraphicContainer-BI1S6hRh.js";import"./TechniqueInstance-CZ7k9R3b.js";import"./UpdateTracking2D-BE_NXmcI.js";import"./Utils-CbXWFIaU.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-Bw1HwQed.js";import"./ProgramTemplate-C7rh3VA_.js";import"./TileContainer-jfJyji48.js";import"./WGLContainer-CdJSqhJr.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-COAq1jYG.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-C8t9cW6d.js";import"./OptimizedFeature-BvRAcurs.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-DAMnwR6I.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-rLoSFABN.js";import"./ShaderBuilder-B4r_5xaS.js";import"./BindType-BBwFZqyN.js";import"./utils-Budxk1nw.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-Cd2X4tMb.js";import"./AttributeStore-CqN8uK5p.js";import"./queryUtils-BeGTCCtN.js";import"./json-Wa8cmqdu.js";import"./timeSupport-C2v7m5dG.js";import"./normalizeUtilsSync-CR8jnLuG.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-ZPpV44Vn.js";let y=class extends b(S){constructor(){super(...arguments),this._graphicsViewMap={},this._popupTemplates=new Map,this.graphicsViews=[]}async hitTest(e,r){if(!this.graphicsViews.length)return null;const o=this.layer;return this.graphicsViews.reverse().flatMap((t=>{const i=this._popupTemplates.get(t),p=t.hitTest(e);for(const s of p)s.layer=o,s.sourceLayer=o,s.popupTemplate=i;return p})).map((t=>({type:"graphic",graphic:t,layer:o,mapPoint:e})))}update(e){if(this.graphicsViews)for(const r of this.graphicsViews)r.processUpdate(e)}attach(){this.addAttachHandles([l((()=>this.layer?.featureCollections),(e=>{this._clear();for(const{popupInfo:r,featureSet:o,layerDefinition:t}of e){const i=g.fromJSON(o),p=new w(i.features),s=t.drawingInfo,c=r?f.fromJSON(r):null,a=u(s.renderer),m=new T({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:p,renderer:a,container:new _(this.view.featuresTilingScheme)});this._graphicsViewMap[i.geometryType]=m,this._popupTemplates.set(m,c),i.geometryType!=="polygon"||this.layer.polygonSymbol?i.geometryType!=="polyline"||this.layer.lineSymbol?i.geometryType!=="point"||this.layer.pointSymbol||(this.layer.pointSymbol=a.symbol):this.layer.lineSymbol=a.symbol:this.layer.polygonSymbol=a.symbol,this.graphicsViews.push(m),this.container.addChild(m.container)}}),h),l((()=>this.layer?.polygonSymbol),(e=>{this._graphicsViewMap.polygon.renderer=new n({symbol:e})}),h),l((()=>this.layer?.lineSymbol),(e=>{this._graphicsViewMap.polyline.renderer=new n({symbol:e})}),h),l((()=>this.layer?.pointSymbol),(e=>{this._graphicsViewMap.point.renderer=new n({symbol:e})}),h)])}detach(){this._clear()}moveEnd(){}viewChange(){for(const e of this.graphicsViews)e.viewChange()}_clear(){this.container.removeAllChildren();for(const e of this.graphicsViews)e.destroy();this._graphicsViewMap={},this._popupTemplates.clear(),this.graphicsViews.length=0}};y=d([V("esri.views.2d.layers.GeoRSSLayerView2D")],y);const me=y;export{me as default};
