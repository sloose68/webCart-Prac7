import{cB as m,cC as c,ay as g,aw as n,b as l,W as h,X as d,a2 as o,a3 as w,a4 as u}from"./index-Df_QNp0R.js";import{S as y,u as V}from"./LayerView-BfP2UTie.js";import{t as v}from"./GraphicContainer-BUSCAXF1.js";import{O as f}from"./GraphicsView2D-DTJgU6_8.js";import"./Container-Djh4sRFw.js";import"./layerViewUtils-DxKFd2BX.js";import"./AGraphicContainer-Ddmc7mJ6.js";import"./TechniqueInstance-DUvbYFca.js";import"./UpdateTracking2D-gReQ4Bdy.js";import"./Utils-AUZNGyM7.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-BHtdNQ4D.js";import"./ProgramTemplate-B7gAsvcy.js";import"./TileContainer-Ba1N54KK.js";import"./WGLContainer-DRVOhraB.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-C2xv_OY9.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-BK15gLjF.js";import"./OptimizedFeature-2vjdYz01.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-Cnpm5LbA.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-Cciwll1M.js";import"./ShaderBuilder-Dd7r87bG.js";import"./BindType-BBwFZqyN.js";import"./utils-DqAXnFq_.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-DVEe-hk0.js";import"./AttributeStore-C7wGpFKI.js";import"./queryUtils-BXgRNbs9.js";import"./json-Wa8cmqdu.js";import"./timeSupport-nSp-Yi4J.js";import"./normalizeUtilsSync-Bcu6zfZM.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-yoCpSDtJ.js";let e=class extends y(V){attach(){this.graphicsView=new f({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new v(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),m((()=>this.layer?.visible),(()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()}))]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map((s=>({type:"graphic",graphic:s,mapPoint:i,layer:this.layer}))):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,s){let t;typeof i=="number"?t=[i]:i instanceof g?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map((r=>r&&r.uid)):n.isCollection(i)&&i.length>0&&(t=i.map((r=>r&&r.uid)).toArray());const a=t?.filter(l);if(!a?.length)return h();const p=s?.name??d;return this._addHighlights(a,p),h((()=>!this.destroyed&&this._removeHighlights(a,p)))}_processHighlight(){const i=this._getHighlights();this.graphicsView?.setHighlight(i)}};o([w()],e.prototype,"graphicsView",void 0),e=o([u("esri.views.2d.layers.GraphicsLayerView2D")],e);const ai=e;export{ai as default};
