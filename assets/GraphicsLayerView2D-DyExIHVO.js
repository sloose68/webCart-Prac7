import{cB as m,cC as c,ay as g,aw as n,b as l,W as h,X as d,a2 as o,a3 as w,a4 as u}from"./index-Ccrt8twN.js";import{S as y,u as V}from"./LayerView-DVZYonH7.js";import{t as v}from"./GraphicContainer-BykXYatN.js";import{O as f}from"./GraphicsView2D-QF1qkWwP.js";import"./Container-Cd3Te_aR.js";import"./layerViewUtils-Db2jmMIF.js";import"./AGraphicContainer-BI1S6hRh.js";import"./TechniqueInstance-CZ7k9R3b.js";import"./UpdateTracking2D-BE_NXmcI.js";import"./Utils-CbXWFIaU.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-Bw1HwQed.js";import"./ProgramTemplate-C7rh3VA_.js";import"./TileContainer-jfJyji48.js";import"./WGLContainer-CdJSqhJr.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-COAq1jYG.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./featureConversionUtils-C8t9cW6d.js";import"./OptimizedFeature-BvRAcurs.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./FeatureCommandQueue-DAMnwR6I.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-rLoSFABN.js";import"./ShaderBuilder-B4r_5xaS.js";import"./BindType-BBwFZqyN.js";import"./utils-Budxk1nw.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-Cd2X4tMb.js";import"./AttributeStore-CqN8uK5p.js";import"./queryUtils-BeGTCCtN.js";import"./json-Wa8cmqdu.js";import"./timeSupport-C2v7m5dG.js";import"./normalizeUtilsSync-CR8jnLuG.js";import"./mat3f64-B5o_lm6j.js";import"./dehydratedFeatures-ZPpV44Vn.js";let e=class extends y(V){attach(){this.graphicsView=new f({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this.layer.graphics,container:new v(this.view.featuresTilingScheme),layerId:this.layer.id}),this.container.addChild(this.graphicsView.container),this.addAttachHandles([this.layer.on("graphic-update",this.graphicsView.graphicUpdateHandler),m((()=>this.layer?.visible),(()=>{this.graphicsView.update({state:this.view.state}),this.graphicsView.pushUpdate()}))]),this._processHighlight()}detach(){this.container.removeAllChildren(),this.graphicsView=c(this.graphicsView)}async hitTest(i){return this.graphicsView?this.graphicsView.hitTest(i).map((s=>({type:"graphic",graphic:s,mapPoint:i,layer:this.layer}))):null}queryGraphics(){return Promise.resolve(this.graphicsView.graphics)}update(i){this.graphicsView.processUpdate(i)}viewChange(){this.graphicsView.viewChange()}moveEnd(){}isUpdating(){return!this.graphicsView||this.graphicsView.updating}highlight(i,s){let t;typeof i=="number"?t=[i]:i instanceof g?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map((r=>r&&r.uid)):n.isCollection(i)&&i.length>0&&(t=i.map((r=>r&&r.uid)).toArray());const a=t?.filter(l);if(!a?.length)return h();const p=s?.name??d;return this._addHighlights(a,p),h((()=>!this.destroyed&&this._removeHighlights(a,p)))}_processHighlight(){const i=this._getHighlights();this.graphicsView?.setHighlight(i)}};o([w()],e.prototype,"graphicsView",void 0),e=o([u("esri.views.2d.layers.GraphicsLayerView2D")],e);const ai=e;export{ai as default};
