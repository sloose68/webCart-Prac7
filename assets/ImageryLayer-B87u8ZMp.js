const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-qLkoUpOK.js","assets/utils-Dme8YXci.js","assets/index-N-ot2pEg.js","assets/originUtils-DHBtkFkJ.js","assets/jsonContext-CVKCy6_g.js","assets/saveUtils-DhhZlxSp.js","assets/rasterFieldUtils-Al9IEOro.js"])))=>i.map(i=>d[i]);
import{ah as M,q4 as Lt,lJ as zt,al as j,a2 as i,a3 as o,fl as T,a4 as v,bg as pe,a8 as V,bk as te,fv as Be,bi as Pt,sp as fe,sq as rt,sr as it,e5 as X,bm as B,cb as mt,c8 as Ge,c2 as E,bl as se,bj as Ut,bo as Bt,bp as Nt,ai as Ct,de as A,aj as q,dd as J,dc as G,aa as x,eQ as dt,ax as Fe,ce as Qt,hZ as Ht,f5 as kt,d$ as Wt,ss as Zt,I as Kt,D as ot,d as S,st as Xt,ak as lt,cw as Yt,ay as er,kA as tr,d6 as rr,fm as ir,d7 as sr,eX as ar,eY as nr,eW as or,f7 as lr,f6 as ur,eZ as pr,d8 as cr,fo as mr,br as dr,hS as yr,fs as Qe,ft as hr,_ as fr,e$ as gr,h_ as wr,cy as Rr}from"./index-N-ot2pEg.js";import{o as vr,m as br,c as Sr,n as Ir,j as xr,$ as Fr,b as Dr,e as Tr,k as Ie,q as ut,f as jr,v as Pr,p as Nr,h as Cr,V as Or,s as _r,u as $r,l as Ar}from"./rasterFieldUtils-Al9IEOro.js";import{N as F,y as K,h as Mr,a as Vr,j as qr,u as Er,p as Jr,l as Gr,c as Lr,E as zr,q as Ur,D as Br,B as Qr,t as Hr,d as kr}from"./RasterJobHandlerMixin-erJY_9Xk.js";import{A as Ot,B as _t,c as Wr,w as Zr,x as Kr,a as Le,y as ze,n as xe,l as Xr,m as $t,_ as Yr,j as xt,P as ei}from"./RasterSymbolizer-ha5Sbbpu.js";import{t as Ft}from"./imageBitmapUtils-DeSpXtYO.js";import{c as pt,l as ti}from"./dataUtils-Dj7tyWV_.js";import{f as Dt,p as ri,c as ii,o as si}from"./RasterPresetRendererMixin-1h5P7AB6.js";import{i as ai,s as ni}from"./executeForIds-D_aOfqun.js";import{s as oi}from"./executeQueryJSON-CKje_3tC.js";import"./ClassBreaksDefinition-QMa9zRNn.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./query-BFdTuH89.js";import"./pbfQueryUtils-BnHKYbcL.js";import"./pbf-BRyrb4_a.js";import"./OptimizedFeature-BunYeD2J.js";import"./OptimizedFeatureSet-BR8EEvDc.js";const li={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},ui=new Set(["u1","u2","u4","u8","s8","u16","s16"]),pi={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},ci=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function At(s){return ci.has(s.type)}function yt(s,t){if(!s||!t)return M(s||t);const n=M(s);if(n.functionDefinition&&t.rasterFunctionDefinition){const e=t.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),Mt(n.functionDefinition.arguments,t),n.rasterFunctionDefinition=n.functionDefinition.toJSON()}else t.functionName?.toLowerCase()!=="none"&&(Vt(n.functionArguments).Raster=t);return n}function Mt(s,t){for(const n in s)n.toLowerCase()==="raster"&&(s[n].type==="RasterFunctionVariable"?(s[n]=t.rasterFunctionDefinition,s[n].type="RasterFunctionTemplate"):s[n].type==="RasterFunctionTemplate"&&Mt(s[n].arguments,t))}function re(s){const t=M(li[s.functionName+"Function"]),n=s.functionArguments;for(const e in n)e.toLowerCase()==="raster"?(t.arguments[e]=re(n[e]),t.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(t.arguments[e].value=Ri(n[e]),t.arguments.ColorSchemeType.value=0):t.arguments[e].value=n[e];return t}function mi(s,t){switch(t=t||{},s.type){case"raster-stretch":return hi(s,t);case"class-breaks":return fi(s,t);case"unique-value":return gi(s,t);case"raster-colormap":return wi(s,t);case"vector-field":return di(s,t);case"raster-shaded-relief":return yi(s,t);case"flow":throw new Error("Unsupported rendering rule.")}}function Vt(s){const t=s?.Raster??s?.raster;return t&&t.declaredClass==="esri.layers.support.RasterFunction"?Vt(t.functionArguments):s}const Me={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function di(s,t){const n=new F;n.functionName="VectorFieldRenderer";const{dataType:e,bandNames:r}=t,a=e==="vector-uv";let l,u;if(r&&r.length===2){const w=r.map((h=>h.toLowerCase()));l=w.indexOf("magnitude"),u=w.indexOf("direction")}l!==-1&&l!==null||(l=0,u=1);const p=s.rotationType==="arithmetic"?1:2,m=s.flowRepresentation==="flow-from"?0:1,c=s.visualVariables?s.visualVariables.find((w=>w.field==="Magnitude")):new Lt,d={magnitudeBandID:l,directionBandID:u,isUVComponents:a,referenceSystem:p,massFlowAngleRepresentation:m,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:pi[s.style.toLowerCase().replace("-","_")],minimumMagnitude:c.minDataValue,maximumMagnitude:c.maxDataValue,minimumSymbolSize:c.minSize,maximumSymbolSize:c.maxSize};n.functionArguments=d;const y=re(n);return t.convertToRFT?F.fromJSON({rasterFunctionDefinition:y}):n}function yi(s,t){const n=t.convertToRFT;if(t.dataType!=="elevation"&&(t.dataType!=="generic"||t.bandCount!==1||t.pixelType!=="s16"&&t.pixelType!=="s32"&&t.pixelType!=="f32"&&t.pixelType!=="f64"))return new F;const e=new F;e.functionName="Hillshade";const r=s.hillshadeType==="traditional"?0:1,a=s.scalingType==="none"?1:3,l={HillshadeType:r,SlopeType:a,ZFactor:s.zFactor};return r===0&&(l.Azimuth=s.azimuth,l.Altitude=s.altitude),a===3&&(l.PSPower=s.pixelSizePower,l.PSZFactor=s.pixelSizeFactor),e.functionArguments=l,e.variableName="Raster",s.colorRamp&&(e.functionName="ShadedRelief",n?l.ColorRamp=Ot(s.colorRamp):l.Colormap=_t(s.colorRamp)),n?new F({rasterFunctionDefinition:re(e)}):e}function hi(s,t){const n=t.convertToRFT,e=new F;e.functionName="Stretch";const r=Me[Wr.toJSON(s.stretchType)],a="u8",l=s.customStatistics?.map((p=>[p.min,p.max,p.avg??0,p.stddev??1])),u={StretchType:r,Statistics:l,DRA:s.dynamicRangeAdjustment,UseGamma:s.useGamma,Gamma:s.gamma,ComputeGamma:s.computeGamma};if(s.outputMin!=null&&(u.Min=s.outputMin),s.outputMax!=null&&(u.Max=s.outputMax),r===Me.standardDeviation?(u.NumberOfStandardDeviations=s.numberOfStandardDeviations,e.outputPixelType=a):r===Me.percentClip?(u.MinPercent=s.minPercent,u.MaxPercent=s.maxPercent,e.outputPixelType=a):r===Me.minMax?e.outputPixelType=a:r===Me.sigmoid&&(u.SigmoidStrengthLevel=s.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",s.colorRamp){const p=s.colorRamp,m=new F;if(n)m.functionArguments={ColorRamp:Ot(p)};else{const c=Zr(p,!0);if(c)m.functionArguments={colorRampName:c};else if(!t.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const d=s.colorRamp.toJSON();d.type==="algorithmic"?d.algorithm=d.algorithm||"esriCIELabAlgorithm":d.type==="multipart"&&d.colorRamps?.length&&d.colorRamps.forEach((y=>y.algorithm=y.algorithm||"esriCIELabAlgorithm")),m.functionArguments={colorRamp:d}}else m.functionArguments={Colormap:_t(p)}}return m.variableName="Raster",m.functionName="Colormap",m.functionArguments.Raster=e,n?new F({rasterFunctionDefinition:re(m)}):m}return n?new F({rasterFunctionDefinition:re(e)}):e}function fi(s,t){const n=[],e=[],r=[],a=[],{pixelType:u,rasterAttributeTable:p}=t,m=p==null?null:p.features,c=qt(p);if(c&&m&&Array.isArray(m)&&s.classBreakInfos){s.classBreakInfos.forEach(((g,N)=>{const R=g.symbol?.color;let b;R?.a&&g.minValue!=null&&g.maxValue!=null&&m.forEach((O=>{g.minValue!=null&&g.maxValue!=null&&(b=O.attributes[s.field],(b>=g.minValue&&b<g.maxValue||N===s.classBreakInfos.length-1&&b>=g.minValue)&&a.push([O.attributes[c],R.r,R.g,R.b]))}))}));const h=u?st(a,u):a,f=new F;return f.functionName="Colormap",f.functionArguments={},f.functionArguments.Colormap=h,f.variableName="Raster",t.convertToRFT?new F({rasterFunctionDefinition:re(f)}):f}s.classBreakInfos.forEach(((h,f)=>{if(h.minValue==null||h.maxValue==null)return;const g=h.symbol&&h.symbol.color;g?.a?(f===0?n.push(h.minValue,h.maxValue+1e-4):n.push(h.minValue+1e-4,h.maxValue+1e-4),e.push(f),a.push([f,g.r,g.g,g.b])):r.push(h.minValue,h.maxValue)}));const d=u?st(a,u):a,y=new F;y.functionName="Remap",y.functionArguments={InputRanges:n,OutputValues:e,NoDataRanges:r},y.variableName="Raster";const w=new F;return w.functionName="Colormap",w.functionArguments={Colormap:d,Raster:y},t.convertToRFT?new F({rasterFunctionDefinition:re(w)}):w}function st(s,t){const n=ui.has(t)?zt(t):null;return n&&s.push([Math.floor(n[0]-1),0,0,0],[Math.ceil(n[1]+1),0,0,0]),s}function qt(s){if(s==null)return;const{fields:t}=s;return t?.find((e=>e?.name&&e.name.toLowerCase()==="value"))?.name}function gi(s,t){const n=[],{pixelType:e,rasterAttributeTable:r}=t,a=r==null?null:r.features,l=qt(r),u=s.defaultSymbol?.color?.toRgb(),p=s.uniqueValueInfos;if(p)if(a){if(l){const d=new Map;p.forEach((w=>{const h=w.value,f=Tt(w);h!=null&&f?.a&&d.set(String(h),f.toRgb())}));const y=s.field;y&&a.forEach((({attributes:w})=>{const h=String(w[y]),f=w[l],g=d.get(h);g?n.push([f,...g]):u&&n.push([f,...u])}))}}else for(let d=0;d<p.length;d++){const y=p[d],w=Tt(y),h=+y.value;if(w?.a){if(isNaN(h))return null;n.push([h,w.r,w.g,w.b])}}const m=e?st(n,e):n,c=new F;return c.functionName="Colormap",c.functionArguments={},c.functionArguments.Colormap=m,c.variableName="Raster",t.convertToRFT?new F({rasterFunctionDefinition:re(c)}):c}function Tt(s){return s.symbol?.type==="polygon-3d"?s.symbol.symbolLayers?.find((t=>t.type==="fill"))?.material?.color:s.symbol?.color}function wi(s,t){const n=s.extractColormap();if(!n||n.length===0)return null;const{pixelType:e}=t,r=e?st(n,e):n,a=new F;return a.functionName="Colormap",a.functionArguments={},a.functionArguments.Colormap=r,t.convertToRFT?new F({rasterFunctionDefinition:re(a)}):a}function Ri(s){const t=[],n=[];return s.forEach((e=>{t.push(e[0]),n.push(Kr([...e.slice(1),255]))})),{type:"RasterColormap",values:t,colors:n}}let C=class extends j{constructor(){super(...arguments),this.layer=null,this.requestRawData=!1,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(t,n,e){this.layer.version<10.3||(n[e]=t)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(t,n,e){this.format&&this.format.toLowerCase().includes("jpg")&&t!=null&&(n[e]=t)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(t,n,e){this.format==="lerc"&&t!=null&&(n[e]=t)}get format(){return this.requestRawData||this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:t}=this;return t.pixelType!==t.serviceRasterInfo.pixelType?t.pixelType:void 0}writeLercVersion(t,n,e){this.format==="lerc"&&this.layer.version>=10.5&&(n[e]=t)}get version(){const t=this.layer;return t.commitProperty("bandIds"),t.commitProperty("format"),t.commitProperty("compressionQuality"),t.commitProperty("compressionTolerance"),t.commitProperty("interpolation"),t.commitProperty("noData"),t.commitProperty("noDataInterpretation"),t.commitProperty("mosaicRule"),t.commitProperty("rasterFunction"),t.commitProperty("adjustAspectRatio"),t.commitProperty("pixelFilter"),t.commitProperty("pixelType"),t.commitProperty("definitionExpression"),t.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(t){this._set("version",t)}get mosaicRule(){const t=this.layer;let n=t.mosaicRule;const e=t.definitionExpression;return n?e&&e!==n.where&&(n=n.clone(),n.where=e):e&&(n=new K({where:e})),n}get rasterFunction(){const t=this.layer;let{rasterFunction:n}=t;const e=t.pixelFilter,r=!t.format||t.format.includes("jpg")||t.format.includes("png");this.requestRawData||(n=this._addResampleRasterFunction(n));const a=t.multidimensionalSubset?.areaOfInterest;return a&&(n=vi(n,a)),this.requestRawData||!r||e||t.renderer?.type==="vector-field"||(n=this.combineRendererWithRenderingRule(n)),n}combineRendererWithRenderingRule(t){const n=this.layer,{rasterInfo:e,renderer:r}=n;return t=t||n.rasterFunction,!r||!At(r)?t:yt(mi(r,{rasterAttributeTable:e.attributeTable,pixelType:e.pixelType,dataType:e.dataType,bandNames:e.bandInfos.map((({name:a})=>a)),convertColorRampToColormap:n.version<10.6,convertToRFT:!!t?.rasterFunctionDefinition,bandCount:e.bandCount}),t)}_addResampleRasterFunction(t){if(this.layer.renderer?.type!=="vector-field"||t?.functionName==="Resample")return t;const n=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,e=this.layer.serviceRasterInfo.pixelSize;let r=new F({functionName:"Resample",functionArguments:{ResamplingType:n,InputCellSize:e}});return r=t?.rasterFunctionDefinition?new F({rasterFunctionDefinition:re(r)}):r,yt(r,t)}};function vi(s,t){const n=new F({functionName:"Clip",functionArguments:{ClippingGeometry:t.toJSON(),ClippingType:1}});return yt(n,s)}i([o()],C.prototype,"layer",void 0),i([o()],C.prototype,"requestRawData",void 0),i([o({json:{write:!0}})],C.prototype,"adjustAspectRatio",null),i([T("adjustAspectRatio")],C.prototype,"writeAdjustAspectRatio",null),i([o({json:{write:!0}})],C.prototype,"bandIds",null),i([o({json:{write:!0}})],C.prototype,"compression",void 0),i([o({json:{write:!0}})],C.prototype,"compressionQuality",null),i([T("compressionQuality")],C.prototype,"writeCompressionQuality",null),i([o({json:{write:!0}})],C.prototype,"compressionTolerance",null),i([T("compressionTolerance")],C.prototype,"writeCompressionTolerance",null),i([o({json:{write:!0}})],C.prototype,"format",null),i([o({type:String,json:{read:{reader:Le.read},write:{writer:Le.write}}})],C.prototype,"interpolation",null),i([o({json:{write:!0}})],C.prototype,"noData",null),i([o({type:String,json:{read:{reader:ze.read},write:{writer:ze.write}}})],C.prototype,"noDataInterpretation",null),i([o({type:xe.apiValues,json:{read:xe.read,write:xe.write}})],C.prototype,"pixelType",null),i([o({json:{write:!0}})],C.prototype,"lercVersion",void 0),i([T("lercVersion")],C.prototype,"writeLercVersion",null),i([o({type:Number})],C.prototype,"version",null),i([o({json:{write:!0}})],C.prototype,"mosaicRule",null),i([o({json:{write:!0,name:"renderingRule"}})],C.prototype,"rasterFunction",null),C=i([v("esri.layers.support.ExportImageServiceParameters")],C);let me=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};i([o({type:V,json:{read:!0}})],me.prototype,"fromGeometry",void 0),i([o({type:V,json:{read:!0,write:!0}})],me.prototype,"toGeometry",void 0),i([o({json:{write:!0}})],me.prototype,"objectIds",void 0),i([o({type:String,json:{write:!0}})],me.prototype,"where",void 0),i([o({type:Number,json:{write:!0}})],me.prototype,"maxCount",void 0),me=i([v("esri.rest.support.FindImagesParameters")],me);const Et=s=>{let t=class extends s{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return i([o({json:{write:!0}})],t.prototype,"make",void 0),i([o({json:{write:!0}})],t.prototype,"model",void 0),i([o({json:{write:!0}})],t.prototype,"focalLength",void 0),i([o({json:{write:!0}})],t.prototype,"pixelSize",void 0),i([o({json:{write:!0}})],t.prototype,"rows",void 0),i([o({json:{write:!0}})],t.prototype,"cols",void 0),t=i([v("esri.rest.support.CameraInfoMixin")],t),t};let Q=class extends Et(j){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(t,n){n.acquisitionDate=t?.getTime()}};i([o({json:{write:!0}})],Q.prototype,"id",void 0),i([o({json:{name:"uri",write:!0}})],Q.prototype,"referenceUri",void 0),i([o({type:Date,json:{write:!0}})],Q.prototype,"acquisitionDate",void 0),i([T("acquisitionDate")],Q.prototype,"writeAcquisitionDate",null),i([o({json:{write:!0}})],Q.prototype,"cameraID",void 0),i([o({type:V,json:{write:!0}})],Q.prototype,"center",void 0),i([o({type:V,json:{write:!0}})],Q.prototype,"perspectiveCenter",void 0),i([o({json:{write:!0}})],Q.prototype,"orientation",void 0),Q=i([v("esri.rest.support.ImageInspectionInfo")],Q);const bi=Q;let He=class extends j{constructor(){super(...arguments),this.images=null}};i([o({type:[bi],json:{write:!0}})],He.prototype,"images",void 0),He=i([v("esri.rest.support.FindImagesResult")],He);var ht;let Re=ht=class extends j{constructor(s){super(s),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new ht(M({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};i([o({type:[String],json:{name:"angleName",write:!0}})],Re.prototype,"angleNames",void 0),i([o({type:V,json:{write:!0}})],Re.prototype,"point",void 0),i([o({type:te,json:{write:!0}})],Re.prototype,"spatialReference",void 0),i([o({type:Be,json:{write:!0}})],Re.prototype,"rasterId",void 0),Re=ht=i([v("esri.rest.support.ImageAngleParameters")],Re);let De=class extends j{constructor(t){super(t),this.north=null,this.up=null,this.spatialReference=null}};i([o({type:Number,json:{write:!0}})],De.prototype,"north",void 0),i([o({type:Number,json:{write:!0}})],De.prototype,"up",void 0),i([o({type:te,json:{write:!0}})],De.prototype,"spatialReference",void 0),De=i([v("esri.rest.support.ImageAngleResult")],De);const U=new Pt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let ye=class extends j{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};i([o({type:Number,json:{read:!0,write:!0}})],ye.prototype,"value",void 0),i([o({type:String,json:{read:!0,write:!0}})],ye.prototype,"displayValue",void 0),i([o({type:Number,json:{read:!0,write:!0}})],ye.prototype,"uncertainty",void 0),ye=i([v("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],ye);let Ce=class extends ye{constructor(){super(...arguments),this.unit=null}};i([o({type:String,json:{read:fe.read,write:fe.write}})],Ce.prototype,"unit",void 0),Ce=i([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],Ce);let ke=class extends ye{constructor(){super(...arguments),this.unit=null}};i([o({type:String,json:{read:rt.read,write:rt.write}})],ke.prototype,"unit",void 0),ke=i([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],ke);let Ue=class extends ye{constructor(){super(...arguments),this.unit=null}};i([o({type:String,json:{read:it.read,write:it.write}})],Ue.prototype,"unit",void 0),Ue=i([v("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],Ue);let Z=class extends j{constructor(t){super(t),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};i([o()],Z.prototype,"type",void 0),i([o({type:U.apiValues,json:{read:U.read,write:U.write}})],Z.prototype,"measureOperation",void 0),i([o({type:K,json:{write:!0}})],Z.prototype,"mosaicRule",void 0),i([o({type:V,json:{write:!0}})],Z.prototype,"pixelSize",void 0),i([o({json:{write:!0}})],Z.prototype,"raster",void 0),Z=i([v("esri.rest.support.BaseImageMeasureParameters")],Z);var ft;let ae=ft=class extends Z{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=s.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new ft(M({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([o({types:B,json:{name:"fromGeometry",read:!0,write:!0}})],ae.prototype,"geometry",void 0),i([T("geometry")],ae.prototype,"writeGeometry",null),i([o({type:U.apiValues,json:{write:U.write}})],ae.prototype,"measureOperation",null),i([o({json:{read:!0}})],ae.prototype,"is3D",void 0),i([o({type:String,json:{read:fe.read,write:fe.write}})],ae.prototype,"linearUnit",void 0),i([o({type:String,json:{read:rt.read,write:rt.write}})],ae.prototype,"areaUnit",void 0),ae=ft=i([v("esri.rest.support.ImageAreaParameters")],ae);let he=class extends j{constructor(t){super(t),this.name=null,this.sensorName=null}};i([o({type:String,json:{read:!0,write:!0}})],he.prototype,"name",void 0),i([o({type:String,json:{read:!0,write:!0}})],he.prototype,"sensorName",void 0),he=i([v("esri.rest.support.BaseImageMeasureResult")],he);let Ve=class extends he{constructor(){super(...arguments),this.area=null,this.perimeter=null}};i([o({type:ke,json:{read:!0,write:!0}})],Ve.prototype,"area",void 0),i([o({type:Ce,json:{read:!0,write:!0}})],Ve.prototype,"perimeter",void 0),Ve=i([v("esri.rest.support.ImageAreaResult")],Ve);let We=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.outSpatialReference=null}};i([o({type:te,json:{name:"outSR",write:!0}})],We.prototype,"outSpatialReference",void 0),We=i([v("esri.rest.support.ImageBoundaryParameters")],We);let Te=class extends j{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(t,n){return t==null?null:t.rings?mt.fromJSON(t):Ge.fromJSON(t)}};i([o({type:Number,json:{write:!0}})],Te.prototype,"area",void 0),i([o({types:B,json:{name:"shape",write:!0}})],Te.prototype,"geometry",void 0),i([E("geometry")],Te.prototype,"readGeometry",null),Te=i([v("esri.rest.support.ImageBoundaryResult")],Te);var gt;let ee=gt=class extends Z{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=s.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new gt(M({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([o({type:V,json:{read:!0,write:!0}})],ee.prototype,"fromGeometry",void 0),i([T("fromGeometry")],ee.prototype,"writeFromGeometry",null),i([o({type:V,json:{read:!0,write:!0}})],ee.prototype,"toGeometry",void 0),i([o({type:U.apiValues,json:{write:U.write}})],ee.prototype,"measureOperation",null),i([o({json:{read:!0}})],ee.prototype,"is3D",void 0),i([o({type:String,json:{read:fe.read,write:fe.write}})],ee.prototype,"linearUnit",void 0),i([o({type:String,json:{read:it.read,write:it.write}})],ee.prototype,"angularUnit",void 0),ee=gt=i([v("esri.rest.support.ImageDistanceParameters")],ee);let je=class extends he{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};i([o({type:Ce,json:{read:!0,write:!0}})],je.prototype,"distance",void 0),i([o({type:Ue,json:{read:!0,write:!0}})],je.prototype,"azimuthAngle",void 0),i([o({type:Ue,json:{read:!0,write:!0}})],je.prototype,"elevationAngle",void 0),je=i([v("esri.rest.support.ImageDistanceResult")],je);let ne=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=JSON.stringify(s.toJSON()))}};i([o({types:B,json:{read:se,write:!0}})],ne.prototype,"geometry",void 0),i([T("geometry")],ne.prototype,"writeGeometry",null),i([o({json:{write:!0}})],ne.prototype,"objectIds",void 0),i([Ut(Bt,{ignoreUnknown:!1,name:"spatialRel"})],ne.prototype,"spatialRelationship",void 0),i([o({type:Nt,json:{name:"time",write:!0}})],ne.prototype,"timeExtent",void 0),i([o({type:String,json:{write:!0}})],ne.prototype,"where",void 0),ne=i([v("esri.rest.support.ImageGPSInfoParameters")],ne);let Ze=class extends Et(j){constructor(){super(...arguments),this.id=null}};i([o({json:{write:!0}})],Ze.prototype,"id",void 0),Ze=i([v("esri.rest.support.CameraInfo")],Ze);const Si=Ze;let H=class extends j{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(t,n){n.acquisitionDate=t?.getTime()}};i([o({json:{write:!0}})],H.prototype,"id",void 0),i([o({json:{write:!0}})],H.prototype,"name",void 0),i([o({type:Date,json:{write:!0}})],H.prototype,"acquisitionDate",void 0),i([T("acquisitionDate")],H.prototype,"writeAcquisitionDate",null),i([o({json:{write:!0}})],H.prototype,"cameraID",void 0),i([o({type:V,json:{write:!0}})],H.prototype,"center",void 0),i([o({json:{write:!0}})],H.prototype,"gps",void 0),i([o({json:{write:!0}})],H.prototype,"orientation",void 0),H=i([v("esri.rest.support.ImageGPSInfo")],H);const Ii=H;let qe=class extends j{constructor(){super(...arguments),this.images=null,this.cameras=null}};i([o({type:[Ii],json:{write:!0}})],qe.prototype,"images",void 0),i([o({type:[Si],json:{write:!0}})],qe.prototype,"cameras",void 0),qe=i([v("esri.rest.support.ImageGPSInfoResult")],qe);var wt;let oe=wt=class extends Z{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=s.toJSON())}get measureOperation(){return this.operationType}clone(){return new wt(M({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([o({type:V,json:{read:!0}})],oe.prototype,"fromGeometry",void 0),i([T("fromGeometry")],oe.prototype,"writeFromGeometry",null),i([o({type:V,json:{read:!0,write:!0}})],oe.prototype,"toGeometry",void 0),i([o({type:U.apiValues,json:{write:U.write}})],oe.prototype,"measureOperation",null),i([o({json:{read:!0}})],oe.prototype,"operationType",void 0),i([o({type:String,json:{read:fe.read,write:fe.write}})],oe.prototype,"linearUnit",void 0),oe=wt=i([v("esri.rest.support.ImageHeightParameters")],oe);let Ke=class extends he{constructor(){super(...arguments),this.height=null}};i([o({type:Ce,json:{read:!0,write:!0}})],Ke.prototype,"height",void 0),Ke=i([v("esri.rest.support.ImageHeightResult")],Ke);var Rt;let _=Rt=class extends j{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=JSON.stringify(s.toJSON()))}set mosaicRule(s){let t=s;t?.mosaicMethod&&(t=K.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}writeMosaicRule(s,t,n){s!=null&&(t[n]=JSON.stringify(s.toJSON()))}set rasterFunction(s){let t=s;t?.rasterFunction&&(t=F.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}writeRasterFunction(s,t,n){s!=null&&(t[n]=JSON.stringify(s.toJSON())),s.rasterFunctionDefinition&&(t[n]=JSON.stringify(s.rasterFunctionDefinition))}writeRasterFunctions(s,t,n){s!=null&&(t[n]=JSON.stringify(s.map((e=>e.rasterFunctionDefinition||e.toJSON()))))}writePixelSize(s,t,n){s!=null&&(t[n]=JSON.stringify(s))}writeTimeExtent(s,t,n){if(s!=null){const e=s.start!=null?s.start.getTime():null,r=s.end!=null?s.end.getTime():null;t[n]=e!=null?r!=null?`${e},${r}`:`${e}`:null}}clone(){return new Rt(M({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};i([o({types:B,json:{write:!0}})],_.prototype,"geometry",void 0),i([T("geometry")],_.prototype,"writeGeometry",null),i([o({type:K,json:{write:!0}})],_.prototype,"mosaicRule",null),i([T("mosaicRule")],_.prototype,"writeMosaicRule",null),i([o({type:F,json:{write:!0,name:"renderingRule"}})],_.prototype,"rasterFunction",null),i([T("rasterFunction")],_.prototype,"writeRasterFunction",null),i([o({type:[F],json:{write:!0,name:"renderingRules"}})],_.prototype,"rasterFunctions",void 0),i([T("rasterFunctions")],_.prototype,"writeRasterFunctions",null),i([o({type:V,json:{write:!0}})],_.prototype,"pixelSize",void 0),i([T("pixelSize")],_.prototype,"writePixelSize",null),i([o({type:Boolean,json:{write:!0}})],_.prototype,"returnGeometry",void 0),i([o({type:Boolean,json:{write:!0}})],_.prototype,"returnCatalogItems",void 0),i([o({type:Boolean,json:{write:!0}})],_.prototype,"returnPixelValues",void 0),i([o({type:Number,json:{write:!0}})],_.prototype,"maxItemCount",void 0),i([o({type:Nt,json:{write:{target:"time"}}})],_.prototype,"timeExtent",void 0),i([T("timeExtent")],_.prototype,"writeTimeExtent",null),i([o({json:{write:!0}})],_.prototype,"raster",void 0),i([o({json:{write:!0}})],_.prototype,"viewId",void 0),i([o({type:Boolean,json:{write:!0}})],_.prototype,"processAsMultidimensional",void 0),_=Rt=i([v("esri.rest.support.ImageIdentifyParameters")],_);let k=class extends j{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};i([o({json:{write:!0}})],k.prototype,"catalogItemVisibilities",void 0),i([o({type:Ct,json:{write:!0}})],k.prototype,"catalogItems",void 0),i([o({type:V,json:{write:!0}})],k.prototype,"location",void 0),i([o({json:{write:!0}})],k.prototype,"name",void 0),i([o({json:{write:!0}})],k.prototype,"objectId",void 0),i([o({json:{write:!0}})],k.prototype,"processedValues",void 0),i([o({json:{write:!0}})],k.prototype,"properties",void 0),i([o({json:{write:!0}})],k.prototype,"value",void 0),k=i([v("esri.rest.support.ImageIdentifyResult")],k);var vt;let Pe=vt=class extends j{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(s,t,n){t.geometries={geometryType:"esriGeometryPoint",geometries:s.map((e=>e.toJSON()))}}clone(){return new vt({geometries:this.geometries?.map((s=>s.clone()))??[],rasterId:this.rasterId})}};i([o({type:[V],json:{write:!0}})],Pe.prototype,"geometries",void 0),i([T("geometries")],Pe.prototype,"writeGeometry",null),i([o({type:Be,json:{write:!0}})],Pe.prototype,"rasterId",void 0),Pe=vt=i([v("esri.rest.support.ImagePixelLocationParameters")],Pe);let Xe=class extends j{constructor(){super(...arguments),this.geometries=null}};i([o({json:{write:!0}})],Xe.prototype,"geometries",void 0),Xe=i([v("esri.rest.support.ImagePixelLocationResult")],Xe);var bt;let ve=bt=class extends Z{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=s.toJSON())}get measureOperation(){const{is3D:s,geometry:t}=this;return t.type==="point"?s?"point-3D":"point":s?"centroid-3D":"centroid"}clone(){return new bt(M({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};i([o({types:B,json:{name:"fromGeometry",read:se}})],ve.prototype,"geometry",void 0),i([T("geometry")],ve.prototype,"writeGeometry",null),i([o({type:U.apiValues,json:{read:U.read,write:U.write}})],ve.prototype,"measureOperation",null),i([o({json:{read:!0}})],ve.prototype,"is3D",void 0),ve=bt=i([v("esri.rest.support.ImagePointParameters")],ve);let Ye=class extends he{constructor(){super(...arguments),this.point=null}};i([o({type:V,json:{name:"point.value",read:!0,write:!0}})],Ye.prototype,"point",void 0),Ye=i([v("esri.rest.support.ImagePointResult")],Ye);let be=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(s,t,n){t.geometries=s?.length?{geometryType:X(s[0]),geometries:s.map((e=>({...e.toJSON(),spatialReference:void 0})))}:null}};i([o({types:[B]})],be.prototype,"geometries",void 0),i([T("geometries")],be.prototype,"writeGeometries",null),i([o({type:[Be],json:{write:!0}})],be.prototype,"rasterIds",void 0),i([o({type:te,json:{name:"outSR",write:!0}})],be.prototype,"outSpatialReference",void 0),be=i([v("esri.rest.support.ImageToMapMultirayParameters")],be);let le=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(t,n,e){t!=null&&(n.geometryType=X(t),n[e]={...t.toJSON(),spatialReference:void 0})}};i([o({types:B,json:{read:se,write:!0}})],le.prototype,"geometry",void 0),i([T("geometry")],le.prototype,"writeGeometry",null),i([o({json:{write:!0}})],le.prototype,"rasterId",void 0),i([o({type:te,json:{name:"outSR",write:!0}})],le.prototype,"outSpatialReference",void 0),i([o({json:{name:"options.DOff",write:!0}})],le.prototype,"depthOffset",void 0),i([o({json:{name:"options.Adjust",write:!0}})],le.prototype,"adjust",void 0),le=i([v("esri.rest.support.ImageToMapParameters")],le);let Ee=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};i([o({type:String,json:{name:"uri",write:!0}})],Ee.prototype,"referenceUri",void 0),i([o({type:Number,json:{write:!0}})],Ee.prototype,"rasterId",void 0),Ee=i([v("esri.rest.support.ImageUrlParameters")],Ee);let et=class extends j{constructor(){super(...arguments),this.url=null}};i([o({json:{name:"imageURL",write:!0}})],et.prototype,"url",void 0),et=i([v("esri.rest.support.ImageUrlResult")],et);const ct=new Pt({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let ue=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(s,t,n){s?.length&&(t.geometryType=X(s[0]),t.geometries=s.map((e=>e.toJSON())))}};i([o({types:[B]})],ue.prototype,"geometries",void 0),i([T("geometries")],ue.prototype,"writeGeometries",null),i([o({type:K,json:{write:!0}})],ue.prototype,"mosaicRule",void 0),i([o({type:V,json:{write:!0}})],ue.prototype,"pixelSize",void 0),i([o({json:{write:!0}})],ue.prototype,"constantZ",void 0),i([o({type:ct.apiValues,json:{read:ct.read,write:ct.write}})],ue.prototype,"baseType",void 0),ue=i([v("esri.rest.support.ImageVolumeParameters")],ue);let W=class extends j{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};i([o({json:{write:!0}})],W.prototype,"area",void 0),i([o({json:{write:!0}})],W.prototype,"cut",void 0),i([o({json:{write:!0}})],W.prototype,"fill",void 0),i([o({json:{name:"maxz",write:!0}})],W.prototype,"maxZ",void 0),i([o({json:{name:"minz",write:!0}})],W.prototype,"minZ",void 0),i([o({json:{name:"meanz",write:!0}})],W.prototype,"meanZ",void 0),i([o({json:{write:!0}})],W.prototype,"cutCellCount",void 0),i([o({json:{write:!0}})],W.prototype,"fillCellCount",void 0),W=i([v("esri.rest.support.ImageVolume")],W);const xi=W;let tt=class extends j{constructor(){super(...arguments),this.volumes=[]}};i([o({type:[xi],json:{write:!0}})],tt.prototype,"volumes",void 0),tt=i([v("esri.rest.support.ImageVolumeResult")],tt);let Se=class extends pe.ClonableMixin(j){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]=JSON.stringify(s))}};i([o({types:B,json:{read:se,write:!0}})],Se.prototype,"geometry",void 0),i([T("geometry")],Se.prototype,"writeGeometry",null),i([o({json:{write:!0}})],Se.prototype,"rasterId",void 0),i([o({json:{name:"options.VisibleOnly",write:!0}})],Se.prototype,"visibleOnly",void 0),Se=i([v("esri.rest.support.MapToImageParameters")],Se);let de=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(t,n){return t.spatialReference||(t={...t,spatialReference:n.Shape.spatialReference}),V.fromJSON(t)}};i([o({types:B,json:{name:"Shape",read:se,write:!0}})],de.prototype,"geometry",void 0),i([o({json:{name:"Length",write:!0}})],de.prototype,"length",void 0),i([o({json:{name:"Area",write:!0}})],de.prototype,"area",void 0),i([o({type:V,json:{name:"Center",write:!0}})],de.prototype,"center",void 0),i([E("center")],de.prototype,"readCenter",null),de=i([v("esri.rest.support.MeasureAreaFromImageResult")],de);var St;let Ne=St=class extends j{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(s,t,n){s!=null&&(t.geometryType=X(s),t[n]={...s.toJSON(),spatialReference:void 0})}clone(){const s=M({geometry:this.geometry,rasterId:this.rasterId});return new St(s)}};i([o({types:B,json:{name:"fromGeometry",read:se,write:!0}})],Ne.prototype,"geometry",void 0),i([T("geometry")],Ne.prototype,"writeGeometry",null),i([o({json:{write:!0}})],Ne.prototype,"rasterId",void 0),Ne=St=i([v("esri.rest.support.MeasureFromImageParameters")],Ne);let Je=class extends j{constructor(){super(...arguments),this.geometry=null,this.length=null}};i([o({types:B,json:{name:"Shape",read:se,write:!0}})],Je.prototype,"geometry",void 0),i([o({json:{name:"Length",write:!0}})],Je.prototype,"length",void 0),Je=i([v("esri.rest.support.MeasureLengthFromImageResult")],Je);function It(s){const t=s?.time;if(t&&(t.start!=null||t.end!=null)){const n=[];t.start!=null&&n.push(t.start),t.end==null||n.includes(t.end)||n.push(t.end),s.time=n.join(",")}}async function Jt(s,t,n){t=A(qr,t);const e=q(s),r=t.geometry?[t.geometry]:[],a=await Fe(r),l=t.toJSON();It(l);const u=a?.[0];u!=null&&(l.geometry=ie(u));const p=J({...e.query,f:"json",...l});return G(p,n)}async function Fi(s,t,n){const e=(t=A(ue,t)).toJSON();e.geometries=JSON.stringify(e.geometries);const r=q(s),a=J({...r.query,f:"json",...e}),l=G(a,n),{data:u}=await x(`${r.path}/calculateVolume`,l);return tt.fromJSON({volumes:u.results})}async function Di(s,t,n){const e=(t=A(Re,t)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),t?.point?.spatialReference?.imageCoordinateSystem&&(e.point.spatialReference=nt(t.point.spatialReference)),t?.spatialReference?.imageCoordinateSystem&&(e.spatialReference=Oe(t.spatialReference));const r=q(s),a=J({...r.query,f:"json",...e}),l=G(a,n),{data:u}=await x(`${r.path}/computeAngles`,l);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new te({wkid:0,imageCoordinateSystem:u.spatialReference}):te.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new De(u)}async function Ti(s,t,n){const e=(t=A(Pe,t)).toJSON(),{geometries:r}=t;if(r)for(let m=0;m<r.length;m++)r[m].spatialReference?.imageCoordinateSystem&&(e.geometries.geometries[m].spatialReference=nt(r[m].spatialReference));const a=q(s),l=J({...a.query,f:"json",...e}),u=G(l,n),{data:p}=await x(`${a.path}/computePixelLocation`,u);return Xe.fromJSON(p)}async function ji(s,t,n){const e=await Jt(s,t,n),r=q(s),{data:a}=await x(`${r.path}/computeStatisticsHistograms`,e),{statistics:l}=a;return l?.length&&l.forEach((u=>{u.avg=u.mean,u.stddev=u.standardDeviation})),{statistics:l,histograms:a.histograms}}async function Pi(s,t,n){const e=await Jt(s,t,n),r=q(s),{data:a}=await x(`${r.path}/computeHistograms`,e);return{histograms:a.histograms}}async function Ni(s,t,n){const e=(t=A(Mr,t)).toJSON();It(e),e.outFields?.length&&(e.outFields=e.outFields.join(","));const r=await Fe(t.geometry),a=r?.[0];a!=null&&(e.geometry=ie(a));const l=q(s),u=J({...l.query,f:"json",...e}),p=G(u,n),{data:m}=await x(`${l.path}/getSamples`,p),c=m.samples.map((d=>{const y=d.value==="NaN"||d.value===""?null:d.value.split(" ").map((w=>Number(w)));return{...d,pixelValue:y}}));return Vr.fromJSON({samples:c})}async function jt(s,t,n){t=A(_,t);const e=q(s),r=t.geometry?[t.geometry]:[];return Fe(r).then((a=>{const l=t.toJSON(),u=a?.[0];u!=null&&(l.geometry=JSON.stringify(ie(u)));const p=J({...e.query,f:"json",...l}),m=G(p,n);return x(e.path+"/identify",m)})).then((a=>k.fromJSON(a.data)))}async function Ci(s,t,n){t=A(oe,t);const e=await at(s,t,[t.fromGeometry,t.toGeometry],n);return Ke.fromJSON(e)}async function Oi(s,t,n){t=A(ae,t);const e=await at(s,t,[t.geometry],n);return Ve.fromJSON(e)}async function _i(s,t,n){t=A(ve,t);const e=await at(s,t,[t.geometry],n);return Ye.fromJSON(e)}async function $i(s,t,n){t=A(ee,t);const e=await at(s,t,[t.fromGeometry,t.toGeometry],n);return je.fromJSON(e)}async function at(s,t,n,e){const r=q(s),a=await Fe(n),l=t.toJSON();a[0]!=null&&(l.fromGeometry=JSON.stringify(ie(a[0]))),a[1]!=null&&(l.toGeometry=JSON.stringify(ie(a[1])));const u=J({...r.query,f:"json",...l}),p=G(u,e),{data:m}=await x(r.path+"/measure",p);return m}async function Ai(s,t,n){const e=await Gt(s,t,n);return Je.fromJSON(e)}async function Mi(s,t,n){const e=await Gt(s,t,n);return de.fromJSON(e)}async function Gt(s,t,n){t=A(Ne,t);const e=q(s),r=t.toJSON(),a=J({...e.query,f:"json",...r}),l=G(a,n),{data:u}=await x(e.path+"/measureFromImage",l);return u}function ie(s){const t=s.toJSON();return s.spatialReference?.imageCoordinateSystem&&(t.spatialReference=nt(s.spatialReference)),t}function nt(s){const{imageCoordinateSystem:t}=s;if(t){const{id:n,referenceServiceName:e}=t;return n!=null?e?{icsid:n,icsns:e}:{icsid:n}:{ics:t}}return s.toJSON()}function Oe(s,t){if(!s.imageCoordinateSystem)return dt(s);const n=nt(s),{icsid:e,icsns:r}=n;return e==null||r!=null&&!t?.toLowerCase().includes("/"+r.toLowerCase()+"/")?JSON.stringify(n):`0:${e}`}async function Vi(s,t,n){t=A(We,t);const e=q(s),r=t.toJSON();t.outSpatialReference&&(r.outSR=Oe(t.outSpatialReference));const a=J({...e.query,f:"json",...r}),l=G(a,n),{data:u}=await x(e.path+"/queryBoundary",l);return Te.fromJSON(u)}async function qi(s,t,n){const e=(t=A(ne,t)).toJSON();It(e),e.objectIds?.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const r=await Fe(t.geometry),a=r?.[0];a!=null&&(e.geometry=ie(a));const l=a?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=Oe(l));const u=q(s),p=J({...u.query,f:"json",...e}),m=G(p,n),{data:c}=await x(`${u.path}/queryGPSInfo`,m);return qe.fromJSON(c)}async function Ei(s,t,n){const e=(t=A(le,t)).toJSON();t.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=ie(t.geometry)),t.depthOffset&&t.adjust||delete e.options;const r=q(s),a=J({...r.query,f:"json",...e}),l=G(a,n),{data:u}=await x(`${r.path}/imageToMap`,l);return se(u)}async function Ji(s,t,n){const e=(t=A(be,t)).toJSON();t.rasterIds?.length&&(e.rasterIds=t.rasterIds.join(","));const r=q(s),a=J({...r.query,f:"json",...e}),l=G(a,n),{data:u}=await x(`${r.path}/imageToMapMultiray`,l);return se(u)}async function Gi(s,t,n){const e=(t=A(Se,t)).toJSON(),r=await Fe(t.geometry),a=r?.[0];a!=null&&(e.geometry=ie(a)),t.visibleOnly||delete e.options;const l=a?.spatialReference??t.geometry?.spatialReference;l&&(e.inSR=Oe(l));const u=q(s),p=J({...u.query,f:"json",...e}),m=G(p,n),{data:c}=await x(`${u.path}/mapToImage`,m);return se(c)}async function Li(s,t,n){const e=(t=A(Ee,t)).toJSON(),r=q(s),a=J({...r.query,f:"json",...e}),l=G(a,n),{data:u}=await x(`${r.path}/getImageUrl`,l);return et.fromJSON(u)}async function zi(s,t,n){const e=(t=A(me,t)).toJSON(),r=await Fe([t.fromGeometry,t.toGeometry]);r[0]!=null&&(e.fromGeometry=ie(r[0]),r[0].spatialReference&&(e.inSR=Oe(r[0].spatialReference))),r[1]!=null&&(e.toGeometry=ie(r[1])),t.objectIds?.length&&(e.objectIds=e.objectIds.join(","));const a=q(s),l=J({...a.query,f:"json",...e}),u=G(l,n),{data:p}=await x(`${a.path}/find`,u);return He.fromJSON(p)}async function Ui(s,t,n){const e=q(s),r=J({...e?.query,f:"json"}),a=G(r,n),l=`${e?.path}/${t}/info`,u=x(`${l}`,a),p=x(`${l}/keyProperties`,a),m=await Promise.allSettled([u,p]),c=m[0].status==="fulfilled"?m[0].value.data:null,d=m[1].status==="fulfilled"?m[1].value.data:null;let y=null;c.statistics?.length&&(y=c.statistics.map((O=>({min:O[0],max:O[1],avg:O[2],stddev:O[3]}))));const w=Ge.fromJSON(c.extent),h=Math.ceil(w.width/c.pixelSizeX-.1),f=Math.ceil(w.height/c.pixelSizeY-.1),g=w.spatialReference,N=new V({x:c.pixelSizeX,y:c.pixelSizeY,spatialReference:g}),R=c.histograms?.length?c.histograms:null,b=new Xr({origin:c.origin,blockWidth:c.blockWidth,blockHeight:c.blockHeight,firstPyramidLevel:c.firstPyramidLevel,maximumPyramidLevel:c.maxPyramidLevel});return new $t({width:h,height:f,bandCount:c.bandCount,extent:w,spatialReference:g,pixelSize:N,pixelType:c.pixelType.toLowerCase(),statistics:y,histograms:R,keyProperties:d,storageInfo:b})}const Bi=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Qi=Zt(tr,{min:0,max:255});function Hi(s){const t=JSON.stringify(s),n=t.includes('"rasterFunctionDefinition":{'),e=n?t.match(/"type":"(.*?FunctionArguments")/gi):t.match(/"rasterFunction":"(.*?")/gi),r=e?.map((a=>n?a.slice(8,-18):a.slice(18,-1)));return r?r.join("/"):null}const ki=s=>{let t=class extends s{constructor(){super(...arguments),this._functionRasterInfos={},this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new C({layer:this}))}readServiceSupportsMosaicRule(e,r){return this._isMosaicRuleSupported(r)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach((r=>{e.set(r.name.toLowerCase().replaceAll(/ /gi,"_"),r.name)})),e}readBandIds(e,r){if(Array.isArray(e)&&e.length>0&&e.every((a=>typeof a=="number")))return e}readCapabilities(e,r){return this._readCapabilities(r)}writeCompressionQuality(e,r,a){e!=null&&this.format!=="lerc"&&(r[a]=e)}writeCompressionTolerance(e,r,a){this.format==="lerc"&&e!=null&&(r[a]=e)}readDefaultMosaicRule(e,r){return this._serviceSupportsMosaicRule?K.fromJSON(r):null}get fieldsIndex(){return this.fields?new Wt(this.fields):null}set format(e){e&&Bi.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,r){return r.serviceDataType==="esriImageServiceDataTypeVector-UV"||r.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,r){return r.minLOD!=null&&r.maxLOD!=null?e:0}readMaxScale(e,r){return r.minLOD!=null&&r.maxLOD!=null?e:0}set mosaicRule(e){let r=e;r?.mosaicMethod&&(r=K.fromJSON({...r.toJSON(),mosaicMethod:r.mosaicMethod,mosaicOperation:r.mosaicOperation})),this._set("mosaicRule",r)}readMosaicRule(e,r){const a=e||r.mosaicRule;return a?K.fromJSON(a):this._isMosaicRuleSupported(r)?K.fromJSON(r):null}writeMosaicRule(e,r,a){const{mosaicRule:l}=this;this._isValidCustomizedMosaicRule(l)&&(r[a]=l.toJSON())}writeNoData(e,r,a){e!=null&&typeof e=="number"&&(r[a]=Qi(e))}readObjectIdField(e,r){return e||(e=r.fields.find((l=>l.type==="esriFieldTypeOID"||l.type==="oid"))?.name),e}get parsedUrl(){return Kt(this.url)}readSourceType(e,r){return this._isMosaicDataset(r)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:r}=this;return e?r?.find((({name:l})=>l===e))?.renderer.clone():this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,r,a){const l=r?.layerDefinition?.drawingInfo?.renderer,u=Lr(l,a);return u==null?null:(u.type==="vector-field"&&r.symbolTileSize&&!l.symbolTileSize&&(u.symbolTileSize=r.symbolTileSize),At(u)||ot.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,r,a){r.layerDefinition=r.layerDefinition||{},r.layerDefinition.drawingInfo=r.layerDefinition.drawingInfo||{},r.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(r.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map((l=>l.clone()))??[];e.push(vr()),this.sourceType==="mosaic-dataset"&&this.fields?.length&&e.push(br()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some((({name:l})=>l.toLowerCase()==="none"))&&e.push(Sr()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter((({name:l})=>l.toLowerCase()!=="none")).forEach((({name:l})=>e.push(Ir(l))));const{rasterInfo:r}=this;if(this._isVectorDataSet()){const l=r?.multidimensionalInfo?.variables[0].unit?.trim(),u=xr(l),p=Fr();e.push(u,p)}if(r?.multidimensionalInfo&&this.sourceType==="raster-dataset"){const l=Dr(r.multidimensionalInfo);e.push(...l)}const a=r?.attributeTable;if(a!=null){const l=Tr(a);e.push(...l)}return e}set rasterFunction(e){let r=e;r?.rasterFunction&&(r=F.fromJSON({...r.toJSON(),rasterFunction:r.rasterFunction,rasterFunctionArguments:r.rasterFunctionArguments})),this._set("rasterFunction",r)}readRasterFunction(e,r){const a=r.rasterFunctionInfos;return r.renderingRule||a?.length&&a[0].name!=="None"?this._isRFTJson(r.renderingRule)?F.fromJSON({rasterFunctionDefinition:r.renderingRule}):F.fromJSON(r.renderingRule||{rasterFunctionInfos:r.rasterFunctionInfos}):null}readSpatialReference(e,r){const a=e||r.extent.spatialReference;return a?te.fromJSON(a):null}writePixelType(e,r,a){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(r[a]=xe.toJSON(e))}readVersion(e,r){let a=r.currentVersion;return a||(a=r.hasOwnProperty("fields")||r.hasOwnProperty("timeInfo")?10:9.3),a}applyFilter(e){let r=e;return this.pixelFilter&&(r=this._clonePixelData(e),this.pixelFilter(r)),r}async applyRenderer(e,r){let a=e;const{renderer:l,symbolizer:u,pixelFilter:p}=this;if(!this._isPicture()&&l&&u&&!p){await this._updateSymbolizer(u,l);const{bandIds:m}=this;a=await this._symbolize({pixelData:e,bandIds:m,symbolizer:u},r)}return a}destroy(){this._shutdownJobHandler()}async calculateVolume(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsCalculateVolume)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=M(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),Fi(this.url,e,this._getRequestOptions(r))}async computeAngles(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeAngles)throw new S("imagery-layer:compute-angles","this operation is not supported on the input image service");return Di(this.url,e,this._getRequestOptions(r))}async computePixelSpaceLocations(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputePixelLocation)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return Ti(this.url,e,this._getRequestOptions(r))}async computeHistograms(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeHistograms)throw new S("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),Pi(this.url,e,this._getRequestOptions(r))}async computeStatisticsHistograms(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsComputeStatisticsHistograms)throw new S("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=M(e),this._applyMosaicAndRenderingRules(e),ji(this.url,e,this._getRequestOptions(r))}async measureHeight(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(e.operationType==="base-and-top"?a.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?a.mensuration.supportsHeightFromBaseAndTopShadow:a.mensuration.supportsHeightFromTopAndTopShadow))throw new S("imagery-layer:measure-height","this operation is not supported on the input image service");return e=M(e),this._applyMosaicRule(e),Ci(this.url,e,this._getRequestOptions(r))}async measureAreaAndPerimeter(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsAreaAndPerimeter&&(!e.is3D||a.mensuration.supports3D)))throw new S("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=M(e),this._applyMosaicRule(e),Oi(this.url,e,this._getRequestOptions(r))}async measureDistanceAndAngle(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsDistanceAndAngle&&(!e.is3D||a.mensuration.supports3D)))throw new S("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=M(e),this._applyMosaicRule(e),$i(this.url,e,this._getRequestOptions(r))}async measurePointOrCentroid(e,r){const a=await this._fetchCapabilities(r?.signal);if(!(a.mensuration.supportsPointOrCentroid&&(!e.is3D||a.mensuration.supports3D)))throw new S("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=M(e),this._applyMosaicRule(e),_i(this.url,e,this._getRequestOptions(r))}async measureLengthFromImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new S("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return Ai(this.url,e,this._getRequestOptions(r))}async measureAreaFromImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new S("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Mi(this.url,e,this._getRequestOptions(r))}getField(e){const{fieldsIndex:r}=this;return r?.get(e)}getFieldDomain(e,r){const a=this.getField(e);return a?a.domain:null}fetchImage(e,r,a,l={}){if(Xt(ot.getLogger(this),"`ImageryLayer.fetchImage` is deprecated in favor of 'ImageryLayer.fetchPixels'.",{replacement:"ImageryLayer.fetchPixels",version:"4.33",warnOnce:!0}),e==null||r==null||a==null)throw new S("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");return this.internalFetchImage(e,r,a,l)}async internalFetchImage(e,r,a,l={}){await this._updateCurrentRasterInfo();const u=this.getExportImageServiceParameters(e,r,a,l.timeExtent);if(u==null){if(l.requestAsImageElement&&this._canRequestImageElement(this.format)){const N=document.createElement("canvas");return N.width=r,N.height=a,l.returnImageBitmap?{imageBitmap:await Ft(N,`${n(this.parsedUrl)}/exportImage`,l.signal)}:{imageOrCanvasElement:N}}const{bandIds:d,rasterInfo:y}=this,w=(d?.length||y.bandCount)??0,h=r*a,f=y.pixelType,g=[];for(let N=0;N<w;N++)g.push(pt.createEmptyBand(f,h));return{pixelData:{pixelBlock:new pt({width:r,height:a,pixels:g,mask:new Uint8Array(h),pixelType:f}),extent:e}}}const p=!!l.requestAsImageElement&&!this.pixelFilter,m=p&&!!l.returnImageBitmap,c={imageServiceParameters:u,imageProps:{extent:e,width:r,height:a,format:this.format},requestAsImageElement:p,returnImageBitmap:m,signal:l.signal};return this._requestArrayBuffer(c)}async fetchPixels(e,r,a,l={}){await this._initJobHandler(),l.applyRendering&&await this._updateCurrentRasterInfo();const u=l.applyRendering?void 0:new C({layer:this,requestRawData:!0,interpolation:l.interpolation??"nearest",bandIds:l.bandIds??[]}),p=this.getExportImageServiceParameters(e,r,a,l.timeExtent,u);if(p==null)return{extent:e,pixelBlock:null};delete p.pixelType,delete p.bandIds,delete p.compressionQuality;const m={imageServiceParameters:p,imageProps:{extent:e,width:r,height:a,format:this.format},requestAsImageElement:!1,returnImageBitmap:!1,signal:l.signal},{pixelData:c}=await this._requestArrayBuffer(m);return c??{extent:e,pixelBlock:null}}fetchKeyProperties(e){return x(n(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((r=>r.data))}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new S("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):x(n(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then((r=>Ct.fromJSON(r.data)))}getCatalogItemRasterInfo(e,r){const a={...r,query:this._getQueryParams()};return Ui(n(this.parsedUrl),e,a)}async getCatalogItemICSInfo(e,r){const{data:a}=await x(n(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...r}),l=a?.ics;if(!l)return;let u=null;try{u=(await x(n(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...r})).data.extent}catch{}if(!u?.spatialReference)return{ics:l,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?x(n(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...r}).then((I=>I.data)).catch((()=>({}))):{},m=u.spatialReference,c={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:dt(m),outSR:"0:"+e},d=x(n(this.parsedUrl)+"/project",{query:this._getQueryParams(c),...r}).then((I=>I.data)).catch((()=>({}))),y=5,w=(u.xmin+u.xmax)/2,h=(u.ymax-u.ymin)/(y+1),f=u.ymin+h,g=[];for(let I=0;I<y;I++)g.push({x:w,y:f+h*I});const N={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:g}),inSR:dt(m),outSR:"0:"+e},R=x(n(this.parsedUrl)+"/project",{query:this._getQueryParams(N),...r}).then((I=>I.data)).catch((()=>({}))),b=await Promise.all([p,d,R]);let O=b[0].ipxf;if(O==null){const I=l.geodataXform?.xf_0;I?.name?.toLowerCase()==="topup"&&I?.coefficients?.length===6&&(O={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:I.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const P=Ge.fromJSON(b[1]?.geometries?.[0]);P&&(P.spatialReference=new te({wkid:0,imageCoordinateSystem:l}));const D=b[2].geometries?b[2].geometries.filter((I=>I?.x!=null&&I.y!=null&&I.x!=="NaN"&&I.y!=="NaN")):[],$=D.length;if($<3)return{ics:l,icsToPixelTransform:O,icsExtent:P,northDirection:null};let z=0,_e=0,ge=0,$e=0;for(let I=0;I<$;I++)z+=D[I].x,_e+=D[I].y,ge+=D[I].x*D[I].x,$e+=D[I].x*D[I].y;const Y=($*$e-z*_e)/($*ge-z*z);let we=0;const Ae=D[y-1].x>D[0].x,ce=D[y-1].y>D[0].y;return Y===1/0?we=ce?90:270:Y===0?we=Ae?0:180:Y>0?we=Ae?180*Math.atan(Y)/Math.PI:180*Math.atan(Y)/Math.PI+180:Y<0&&(we=ce?180+180*Math.atan(Y)/Math.PI:360+180*Math.atan(Y)/Math.PI),{ics:l,icsToPixelTransform:O,icsExtent:P,northDirection:we}}async generateRasterInfo(e,r){e=A(F,e);const a={...r,query:this._getQueryParams()};if(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??Dt(n(this.parsedUrl),this.sourceJSON,a);const l=Hi(e);if(!l)throw new S("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[l])return this._functionRasterInfos[l];const u=ri(n(this.parsedUrl),e,a);this._functionRasterInfos[l]=u;try{return await u}catch(p){throw this._functionRasterInfos[l]=null,p}}getExportImageServiceParameters(e,r,a,l,u){e=e.clone().shiftCentralMeridian();const p=Oe(e.spatialReference,n(this.parsedUrl));u??=this.exportImageServiceParameters;const m=u.toJSON(),{bandIds:c,noData:d}=m;let{renderingRule:y}=m;const w=this.rasterFunction?.rasterFunctionDefinition,h=this.renderer?.type,f=!h||h==="raster-stretch"||h==="raster-colormap"||h==="unique-value"||h==="class-breaks"||h==="raster-shaded-relief";if(c?.length&&this._hasRasterFunction(this.rasterFunction)&&!w&&f){const R={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:c}};if(y.rasterFunction==="Stretch")R.rasterFunctionArguments.Raster=y.rasterFunctionArguments.Raster,y.rasterFunctionArguments.Raster=R;else if(y.rasterFunction==="Colormap"){const b=y.rasterFunctionArguments.Raster;b?.rasterFunction==="Stretch"?(R.rasterFunctionArguments.Raster=b.rasterFunctionArguments.Raster,b.rasterFunctionArguments.Raster=R):(R.rasterFunctionArguments.Raster=b,y.rasterFunctionArguments.Raster=R)}else R.rasterFunctionArguments.Raster=y,y=R;m.bandIds=void 0}else m.bandIds=c?.join(",");Array.isArray(d)&&d.length>0&&(m.noData=d.join(","));const g=this._processMultidimensionalIntersection(null,l,u.mosaicRule);if(g.isOutSide)return null;m.mosaicRule=g.mosaicRule!=null?JSON.stringify(g.mosaicRule):null,l=g.timeExtent,m.renderingRule=this._getRenderingRuleString(F.fromJSON(y));const N={};if(l!=null){const{start:R,end:b}=l.toJSON();R&&b&&R===b?N.time=""+R:R==null&&b==null||(N.time=`${R??"null"},${b??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:r+","+a,...m,...N}}async getSamples(e,r){if(!(await this._fetchCapabilities(r?.signal))?.operations.supportsGetSamples)throw new S("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=M(e);const{raster:l}=this;return l&&e.raster==null&&(e.raster=l),Ni(this.url,e,this._getRequestOptions(r))}async identify(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsIdentify)throw new S("imagery-layer:identify","identify operation is not supported on the input image service");e=M(e),this.version<10.91&&e.geometry?.type==="extent"&&(e.geometry=mt.fromExtent(e.geometry));const a=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(a.isOutSide)throw new S("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=a.timeExtent,e.mosaicRule=a.mosaicRule;const{raster:l,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),l&&e.raster==null&&(e.raster=l),jt(this.url,e,this._getRequestOptions(r))}async imageToMap(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsImageToMap)throw new S("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Ei(n(this.parsedUrl),e,this._getRequestOptions(r))}async imageToMapMultiray(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsImageToMapMultiray)throw new S("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Ji(n(this.parsedUrl),e,this._getRequestOptions(r))}async mapToImage(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsMapToImage)throw new S("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Gi(n(this.parsedUrl),e,this._getRequestOptions(r))}async findImages(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsFindImages)throw new S("imagery-layer:find-images","findImages operation is not supported on the input image service");return zi(n(this.parsedUrl),e,this._getRequestOptions(r))}async getImageUrl(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsGetImageUrl)throw new S("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Li(n(this.parsedUrl),e,this._getRequestOptions(r))}createQuery(){return new lt({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQueryBoundary)throw new S("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},Vi(n(this.parsedUrl),e,this._getRequestOptions(r))}async queryRasters(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),oi(this.url,e,r)}async queryObjectIds(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),ai(this.url,e,r)}async queryGPSInfo(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQueryGPSInfo)throw new S("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},qi(n(this.parsedUrl),e,this._getRequestOptions(r))}async queryRasterCount(e,r){return{query:e,requestOptions:r}=await this._prepareForQuery(e,r),ni(this.url,e,r)}async queryVisibleRasters(e,r){if(!e)throw new S("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:a,returnDomainValues:l,returnTopmostRaster:u,showNoDataRecords:p}=r||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let m=!1,c=null,d=null;const y=Ie.servicePixelValue.toLowerCase(),w=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(m=e.outFields.some((P=>!P.toLowerCase().startsWith(y))),this.version>=10.4)){const P=e.outFields.filter(($=>$.toLowerCase().startsWith(y)&&$.length>y.length)).map(($=>{const z=$.slice(y.length+1);return[this._updateRenderingRulesFunctionName(z,w),z]}));c=P.map(($=>new F({functionName:$[0]}))),d=P.map(($=>$[1]));const{rasterFunction:D}=this;c.length===0?D?.functionName?(c.push(D),d.push(D.functionName)):c=null:D?.functionName&&!c.some(($=>$.functionName===D.functionName))&&(c.push(D),d.push(D.functionName))}const h=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:f}=this;let g=e.timeExtent||this.timeExtent;if(f){const{isOutside:P,intersection:D}=ut(f,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(P)throw new S("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");D?.timeExtent!=null&&(g=D.timeExtent)}const N=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,g);let R=e.geometry;this.version<10.91&&R?.type==="extent"&&(R=mt.fromExtent(R));const b=this._getQueryParams({geometry:R,timeExtent:g,mosaicRule:N,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:c,pixelSize:a,returnCatalogItems:m,returnGeometry:h,raster:this.raster,maxItemCount:u?1:null});delete b.f;const O=new _(b);try{await this._generateRasterInfo(this.rasterFunction);const P=await jt(this.url,O,{signal:r?.signal,query:{...this.customParameters}}),D=e.outFields,$=P.value!=null&&P.value.toLowerCase().includes("nodata"),z=m&&!h&&P?.catalogItems?.features.length&&(p||!$),_e=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?jr({rasterInfo:this.rasterInfo,multidimensionalDefinition:N?.multidimensionalDefinition,timeExtent:g,multidimensionalSubset:this.multidimensionalSubset}):null;if(!z)return this._processVisibleRastersResponse(P,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:D,effectiveMultidimensionalDefinition:_e});const ge=this.objectIdField||"ObjectId",$e=P.catalogItems?.features??[],Y=$e.map((ce=>ce.attributes?.[ge])),we=new lt({objectIds:Y,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[ge]}),Ae=await this.queryRasters(we);return Ae?.features?.length&&Ae.features.forEach((ce=>{$e.forEach((I=>{I.attributes[ge]===ce.attributes[ge]&&ce.geometry&&(I.geometry=ce.geometry.clone(),e.outSpatialReference!=null&&(I.geometry.spatialReference=e.outSpatialReference))}))})),this._processVisibleRastersResponse(P,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:D,effectiveMultidimensionalDefinition:_e})}catch{throw new S("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,r){const a=x(n(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:r}).then((p=>p.data?.statistics)),l=x(n(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:r}).then((p=>p.data?.histograms)),u=await Promise.all([a,l]);return u[0]&&u[0].forEach((p=>{p.avg=p.mean,p.stddev=p.standardDeviation})),{statistics:u[0]||null,histograms:u[1]||null}}getMultidimensionalSubsetVariables(e){const r=e??this.serviceRasterInfo.multidimensionalInfo;return Pr(this.multidimensionalSubset,r)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const r=this.sourceJSON,a=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Dt(n(this.parsedUrl),r,{signal:e,query:this._getQueryParams()}).then((p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),ii(p,r),p))),l=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([a,l,u]).then((p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),ot.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([Yt((()=>this.rasterFunction),(c=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(c).then((d=>{d&&(this.rasterInfo=d)}))}))]);const{serviceRasterInfo:m}=this;m.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(m)}))}_combineMosaicRuleWithTimeExtent(e,r){const a=this.timeInfo,{multidimensionalInfo:l}=this.serviceRasterInfo;if(e==null||l==null||r==null||a?.startField==null)return e;const{startField:u}=a,p=l.variables.some((f=>f.dimensions.some((g=>g.name===u))))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter((f=>f.dimensionName!==p)),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const m=e.multidimensionalDefinition.filter((f=>f.dimensionName===p)),c=r.start!=null?r.start.getTime():null,d=r.end!=null?r.end.getTime():null,y=c==null||d==null||c===d,w=y?[c||d]:[[c,d]],h=this.version>=10.8;if(m.length)m.forEach((f=>{f.dimensionName===p&&(h?(f.dimensionName=null,f.isSlice=!1,f.values=[]):(f.isSlice=y,f.values=w))}));else if(!h){const f=e.multidimensionalDefinition.filter((g=>g.variableName!=null&&g.dimensionName==null));f.length?f.forEach((g=>{g.dimensionName=p,g.isSlice=y,g.values=w})):e.multidimensionalDefinition.push(new Nr({variableName:"",dimensionName:p,isSlice:y,values:w}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter((r=>!(!r.variableName&&!r.dimensionName))),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,r){if(!(await this._fetchCapabilities(r?.signal)).operations.supportsQuery)throw new S("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?A(lt,e):this.createQuery(),r=this._getRequestOptions(r),this.raster&&(r.query={...r.query,raster:this.raster}),{query:e,requestOptions:r}}_isSupportedRenderer(e){const{rasterInfo:r,rasterFunction:a}=this;return e.type==="unique-value"&&this._hasRasterFunction(a)&&r?.bandCount===1&&["u8","s8"].includes(r.pixelType)||r!=null&&e!=null&&zr(r).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let r=this.sourceJSON;if(!r){const{data:a,ssl:l}=await x(n(this.parsedUrl),{query:this._getQueryParams(),signal:e});r=a,this.sourceJSON=r,l&&(this.url=this.url.replace(/^http:/i,"https:"))}if(r.capabilities?.toLowerCase().split(",").map((a=>a.trim())).indexOf("tilesonly")>-1)throw new S("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(r,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const r=this._isMosaicDataset(e),a=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return r||a}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:r,functionArguments:a}=e,l=r?.toLowerCase()==="resample",u=a?.ResampleType||a?.resampleType;return l&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const r=this._isPicture(),{rasterInfo:a}=this;if(!r&&!this.pixelFilter||this._isVectorDataSet()){const l=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,u=Ur({variableName:l,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&a.bandCount>=3){const m=u?.bandIds??Br(a);!m||a.bandCount===3&&m[0]===0&&m[1]===1&&m[2]===2||(this.bandIds=m)}e||(e=u?.renderer??Qr(a,{bandIds:this.bandIds,variableName:this.rasterFunction?null:l}));const p=Hr(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=p,this.symbolizer.rasterInfo=a):this.symbolizer=new Yr({rendererJSON:p,rasterInfo:a}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e?.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:r,viewId:a}=this;return{raster:r,viewId:a,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,r,a){return this._rasterJobHandler?this._rasterJobHandler.decode({data:e,options:r}):xt(e,r,a)}async _getRasterFunctionInfos(e){const r=this.sourceJSON.rasterFunctionInfos;return this.loaded?r:r&&this.version>=10.3?r.length===1&&r[0].name.toLowerCase()==="none"?r:(await x(n(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:r,requestAsImageElement:a,returnImageBitmap:l,signal:u}=e;if(a&&this._canRequestImageElement(r.format)){const f=`${n(this.parsedUrl)}/exportImage`,{data:g}=await x(f,{responseType:l?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return g instanceof Blob?{imageBitmap:await Ft(g,f,u),params:r}:{imageOrCanvasElement:g,params:r}}const p=this._initJobHandler(),m=x(n(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),c=(await Promise.all([m,p]))[0].data,d=r.format||"jpgpng";let y=d;if(y!=="bsq"&&y!=="bip"&&(y=ei(c)),!y)throw new S("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(c)));const w={signal:u};return{pixelData:{pixelBlock:await(d==="gif"||d==="bmp"||d.includes("png")&&(y==="png"||y==="jpg")?xt(c,{useCanvas:!0,...r},w):this._decodePixelBlock(c,{width:r.width,height:r.height,planes:null,pixelType:null,noDataValue:null,format:d},w)),extent:r.extent},params:r}}_generateRasterInfo(e,r){return this.generateRasterInfo(e,r).catch((()=>null))}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let r=Cr(e,{multidimensionalSubset:this.multidimensionalSubset});if(r!=null&&r.length>0){this.mosaicRule=this.mosaicRule||new K;const a=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&r.forEach((l=>l.variableName="")),r=r.filter((({variableName:l,dimensionName:u})=>l&&l!=="*"||u)),!a?.length&&r.length&&(this.mosaicRule.multidimensionalDefinition=r)}}_processVisibleRastersResponse(e,r){r=r||{};const a=e.value,{templateRRFunctionNames:l,showNoDataRecords:u,returnDomainValues:p,templateFields:m}=r,c=e.processedValues;let d=e.catalogItems?.features,y=e.properties?.Values?.map((b=>b.replaceAll(/ /gi,", ")))||[];const w=this.objectIdField||"ObjectId",h=typeof a=="string"&&a.toLowerCase().includes("nodata"),f=[];if(a&&!d&&(!h||u)){const b={};b[w]=0,y=[a],d=[new er({geometry:this.fullExtent,attributes:b})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&Or(this.rasterFields,b,r.effectiveMultidimensionalDefinition)}if(!d)return[];this._updateResponseFieldNames(d,m),h&&!u&&(d=[]);const{itemPixelValue:g,servicePixelValue:N}=Ie,R=this.rasterFields.some((b=>b.name===g));for(let b=0;b<d.length;b++){const O=d[b];if(a!=null){const P=y[b],D=this.rasterFunction&&c&&c.length>0&&l&&l.length>0&&l.includes(this.rasterFunction.functionName)?c[l.indexOf(this.rasterFunction.functionName)]:a;if(P.toLowerCase()==="nodata"&&!u)continue;R&&(O.attributes[g]=P),O.attributes[N]=D,this._updateFeatureWithMagDirValues(O,P);const $=this.fields&&this.fields.length>0;let z=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?$?P:a:D;this.rasterFunction||(z=$?P:a),this._updateFeatureWithRasterAttributeTableValues(O,z)}if(O.sourceLayer=O.layer=this,p&&this._updateFeatureWithDomainValues(O),l&&c&&l.length===c.length)for(let P=0;P<l.length;P++){const D=`${Ie.servicePixelValue}.${l[P]}`;O.attributes[D]=c[P]}f.push(d[b])}return f}_processMultidimensionalIntersection(e,r,a){const{multidimensionalSubset:l}=this;if(!l)return{isOutSide:!1,timeExtent:r,mosaicRule:a=this._combineMosaicRuleWithTimeExtent(a,r)};if(l){const{isOutside:u,intersection:p}=ut(l,{geometry:e,timeExtent:r});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};p?.timeExtent!=null&&(r=p.timeExtent)}if(a=this._combineMosaicRuleWithTimeExtent(a,r),a?.multidimensionalDefinition){const{isOutside:u}=ut(l,{multidimensionalDefinition:a.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:r,mosaicRule:a}}_updateFeatureWithRasterAttributeTableValues(e,r){const a=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(a==null)return;const{features:l,fields:u}=a,p=u.map((c=>c.name)).find((c=>c.toLowerCase()==="value"));if(!p)return;const m=l.filter((c=>c.attributes[p]===(r!=null?parseInt(r,10):null)));m&&m[0]&&u.forEach((c=>{const d=_r+c.name;e.attributes[d]=m[0].attributes[c.name]}))}_updateFeatureWithMagDirValues(e,r){if(!this._isVectorDataSet())return;const a=r.split(/,\s*/).map((c=>parseFloat(c))),l=a.map((c=>[c])),u=a.map((c=>({minValue:c,maxValue:c,noDataValue:null}))),p=new pt({height:1,width:1,pixelType:"f32",pixels:l,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new Ge(0,0,0,0,this.spatialReference)});const m=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:ti([p.pixels[0][0],p.pixels[1][0]]);e.attributes[Ie.magnitude]=m[0],e.attributes[Ie.direction]=m[1]}_updateFeatureWithDomainValues(e){const r=this.fields&&this.fields.filter((a=>a.domain&&a.domain.type==="coded-value"));r?.forEach((a=>{const l=e.attributes[a.name];if(l!=null){const u=a.domain.codedValues.find((p=>p.code===l));u&&(e.attributes[a.name]=u.name)}}))}_updateResponseFieldNames(e,r){if(!r||r.length<1)return;const a=this.fieldsIndex;a!=null&&e.forEach((l=>{if(l?.attributes)for(const u of r){const p=a.get(u)?.name;p&&p!==u&&(l.attributes[u]=l.attributes[p],delete l.attributes[p])}}))}_getRenderingRuleString(e){if(e){let r=e.toJSON();return r=r.rasterFunctionDefinition??r,(r.thumbnail||r.thumbnailEx)&&(r.thumbnail=r.thumbnailEx=null),JSON.stringify(r)}return null}_hasRasterFunction(e){return e?.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,r){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const a=e.toLowerCase().replaceAll(/ /gi,"_");return r.has(a)?r.get(a):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:r,mosaicRule:a,rasterFunction:l}=this;l&&e.rasterFunction==null&&(e.rasterFunction=l),a&&e.mosaicRule==null&&(e.mosaicRule=a),r&&e.raster==null&&(e.raster=r)}async _updateCurrentRasterInfo(e){if(this.renderer||this.symbolizer){const r=await this._generateRasterInfo(this.rasterFunction,{signal:e});r&&(this.rasterInfo=r)}}_applyMosaicRule(e){const{raster:r,mosaicRule:a}=this;a&&e.mosaicRule==null&&(e.mosaicRule=a),r&&e.raster==null&&(e.raster=r)}_readCapabilities(e){const r=e.capabilities?e.capabilities.toLowerCase().split(",").map((b=>b.trim())):["image","catalog"],{currentVersion:a,maxRecordCount:l}=e,u=r.includes("image"),p=e.serviceDataType==="esriImageServiceDataTypeElevation",m=!(!e.spatialReference&&!e.extent?.spatialReference),c=r.includes("edit"),d=r.includes("mensuration")&&m,y=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map((b=>b.trim())),w=d&&y.includes("basic"),h=this._isMosaicDataset(e)&&r.includes("catalog"),f=r.includes("download"),g=a>=10.7&&p||a>=11.4&&(p||d&&y.includes("3d")),N=h&&e.fields&&e.fields.length>0,R=N&&e.supportsAdvancedQueries?e.advancedQueryCapabilities:void 0;return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:u,supportsExportImage:u,supportsIdentify:u,supportsImageToMap:a>=11.2&&h,supportsImageToMapMultiray:a>=11.2&&h,supportsMapToImage:a>=11.2&&h,supportsFindImages:a>=11.2&&h,supportsGetImageUrl:a>=11.3&&f,supportsMeasure:d,supportsMeasureFromImage:a>=11.2,supportsDownload:f,supportsQuery:N,supportsGetSamples:a>=10.2&&u,supportsProject:a>=10.3&&u,supportsComputeStatisticsHistograms:a>=10.4&&u,supportsQueryBoundary:a>=10.6&&u,supportsCalculateVolume:g,supportsComputePixelLocation:a>=10.7&&h,supportsComputeAngles:a>=10.91,supportsQueryGPSInfo:a>=11.2&&h,supportsAdd:c,supportsDelete:c,supportsEditing:c,supportsUpdate:c,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:l,maxRecordCountFactor:void 0,maxUniqueIDCount:void 0,supportsStatistics:!!R?.supportsStatistics,supportsOrderBy:!!R?.supportsOrderBy,supportsDistinct:!!R?.supportsDistinct,supportsPagination:!!R?.supportsPagination,supportsPaginationOnAggregatedQueries:!!R?.supportsPaginationOnAggregatedQueries,supportsStandardizedQueriesOnly:!!R?.useStandardizedQueries,supportsPercentileStatistics:!!R?.supportsPercentileStatistics,supportsCentroid:!!R?.supportsReturningGeometryCentroid,supportsCurrentUser:!1,supportsDistance:!!R?.supportsQueryWithDistance,supportsExtent:!!R?.supportsReturningQueryExtent,supportsGeometryProperties:!!R?.supportsReturningGeometryProperties,supportsHavingClause:!!R?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:R?.supportsSqlExpression??!!R,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!R?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:w,supportsAreaAndPerimeter:w,supportsPointOrCentroid:w,supportsHeightFromBaseAndTop:d&&y.includes("base-top height"),supportsHeightFromBaseAndTopShadow:d&&y.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:d&&y.includes("top-top shadow height"),supports3D:d&&y.includes("3d")}}}};function n(e){return e?.path??""}return i([o({clonable:!1})],t.prototype,"_functionRasterInfos",void 0),i([o({readOnly:!0})],t.prototype,"_serviceSupportsMosaicRule",void 0),i([E("_serviceSupportsMosaicRule",["currentVersion","fields"])],t.prototype,"readServiceSupportsMosaicRule",null),i([o({readOnly:!0})],t.prototype,"_rasterFunctionNamesIndex",null),i([o()],t.prototype,"adjustAspectRatio",void 0),i([o({type:[Be],json:{write:!0}})],t.prototype,"bandIds",void 0),i([E("bandIds")],t.prototype,"readBandIds",null),i([o({readOnly:!0,json:{read:!1}})],t.prototype,"capabilities",void 0),i([E("service","capabilities",["capabilities","currentVersion","serviceDataType"])],t.prototype,"readCapabilities",null),i([o({type:Number})],t.prototype,"compressionQuality",void 0),i([T("compressionQuality")],t.prototype,"writeCompressionQuality",null),i([o({type:Number})],t.prototype,"compressionTolerance",void 0),i([T("compressionTolerance")],t.prototype,"writeCompressionTolerance",null),i([o({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),i([o({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],t.prototype,"defaultMosaicRule",void 0),i([E("defaultMosaicRule",["defaultMosaicMethod"])],t.prototype,"readDefaultMosaicRule",null),i([o({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],t.prototype,"definitionExpression",void 0),i([o({readOnly:!0,constructOnly:!0})],t.prototype,"exportImageServiceParameters",void 0),i([o()],t.prototype,"rasterInfo",void 0),i([o({readOnly:!0,type:[Qt]})],t.prototype,"fields",void 0),i([o({readOnly:!0})],t.prototype,"fieldsIndex",null),i([o({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],t.prototype,"format",null),i([E("service","format",["serviceDataType"])],t.prototype,"readFormat",null),i([o({type:Ge})],t.prototype,"fullExtent",void 0),i([o({readOnly:!0})],t.prototype,"hasMultidimensions",void 0),i([o({json:{read:{source:"maxImageHeight"}}})],t.prototype,"imageMaxHeight",void 0),i([o({json:{read:{source:"maxImageWidth"}}})],t.prototype,"imageMaxWidth",void 0),i([o({type:String,json:{type:Le.jsonValues,read:Le.read,write:Le.write}})],t.prototype,"interpolation",void 0),i([o()],t.prototype,"minScale",void 0),i([E("service","minScale")],t.prototype,"readMinScale",null),i([o()],t.prototype,"maxScale",void 0),i([E("service","maxScale")],t.prototype,"readMaxScale",null),i([o({type:K})],t.prototype,"mosaicRule",null),i([E("mosaicRule",["mosaicRule","defaultMosaicMethod"])],t.prototype,"readMosaicRule",null),i([T("mosaicRule")],t.prototype,"writeMosaicRule",null),i([o()],t.prototype,"multidimensionalInfo",void 0),i([o({type:Er,json:{write:!0}})],t.prototype,"multidimensionalSubset",void 0),i([o({json:{type:Be}})],t.prototype,"noData",void 0),i([T("noData")],t.prototype,"writeNoData",null),i([o({type:String,json:{type:ze.jsonValues,read:ze.read,write:ze.write}})],t.prototype,"noDataInterpretation",void 0),i([o({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],t.prototype,"objectIdField",void 0),i([E("objectIdField")],t.prototype,"readObjectIdField",null),i([o({readOnly:!0})],t.prototype,"geometryType",void 0),i([o({})],t.prototype,"typeIdField",void 0),i([o({})],t.prototype,"types",void 0),i([o({readOnly:!0})],t.prototype,"parsedUrl",null),i([o({type:Function})],t.prototype,"pixelFilter",void 0),i([o()],t.prototype,"raster",void 0),i([o({readOnly:!0})],t.prototype,"sourceType",void 0),i([E("sourceType",["serviceSourceType","fields"])],t.prototype,"readSourceType",null),i([o()],t.prototype,"viewId",void 0),i([o()],t.prototype,"renderer",null),i([o({types:Gr,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Jr,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],t.prototype,"internalRenderer",null),i([E("internalRenderer")],t.prototype,"readRenderer",null),i([T("internalRenderer")],t.prototype,"writeRenderer",null),i([o({clonable:!1})],t.prototype,"symbolizer",void 0),i([o(Ht)],t.prototype,"opacity",void 0),i([o({readOnly:!0})],t.prototype,"rasterFields",null),i([o({constructOnly:!0})],t.prototype,"rasterFunctionInfos",void 0),i([o({type:F,json:{name:"renderingRule"}})],t.prototype,"rasterFunction",null),i([E("rasterFunction",["renderingRule","rasterFunctionInfos"])],t.prototype,"readRasterFunction",null),i([o({readOnly:!0})],t.prototype,"serviceDataType",void 0),i([o({readOnly:!0,type:te})],t.prototype,"spatialReference",void 0),i([E("spatialReference",["spatialReference","extent"])],t.prototype,"readSpatialReference",null),i([o({type:xe.apiValues,json:{read:xe.read,type:xe.jsonValues}})],t.prototype,"pixelType",void 0),i([T("pixelType")],t.prototype,"writePixelType",null),i([o({constructOnly:!0,type:$t})],t.prototype,"serviceRasterInfo",void 0),i([o()],t.prototype,"sourceJSON",void 0),i([o(kt)],t.prototype,"url",void 0),i([o({readOnly:!0})],t.prototype,"version",void 0),i([E("version",["currentVersion","fields","timeInfo"])],t.prototype,"readVersion",null),t=i([v("esri.layers.mixins.ArcGISImageService")],t),t};let L=class extends rr(ir(sr(ar(nr(si(ki(kr(or(lr(ur(pr(pe.ClonableMixin(cr))))))))))))){constructor(...s){super(...s),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=mr((async(t,n,e)=>{const{save:r,saveAs:a}=await fr(()=>import("./imageryUtils-qLkoUpOK.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(t){case Qe.SAVE:return r(this,n);case Qe.SAVE_AS:return a(this,e,n)}}))}normalizeCtorArgs(s,t){return typeof s=="string"?{url:s,...t}:s}load(s){const t=s!=null?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(dr).then((()=>this._fetchService(t)))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(s){this._set("legendEnabled",s)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(s){this._set("listMode",s)}writeOperationalLayerType(s,t,n){const e=this.renderer?.type==="vector-field";t[n]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(s){const{rasterFields:t}=this,n=new Set,e=Ie.itemPixelValue.toLowerCase(),r=this.sourceType==="raster-dataset",a=$r.toLowerCase(),l=`${Ie.servicePixelValue.toLowerCase()}.`;for(const m of t){const c=m.name.toLowerCase();c===e||c.startsWith(l)||r&&c.startsWith(a)||n.add(m.name)}const u=yr({fields:t,title:this.title},{...s,visibleFieldNames:n}),{rasterInfo:p}=this;return u?.fieldInfos&&p&&Ar(u.fieldInfos,p),u}queryFeatures(s,t){return this.queryRasters(s,t).then((n=>{if(n?.features)for(const e of n.features)e.layer=e.sourceLayer=this;return n}))}queryFeatureCount(s,t){return this.queryRasterCount(s,t)}redraw(){this.emit("redraw")}async save(s){return this._debouncedSaveOperations(Qe.SAVE,s)}async saveAs(s,t){return this._debouncedSaveOperations(Qe.SAVE_AS,t,s)}serviceSupportsSpatialReference(s){return hr(this,s)}write(s,t){if(!this._isPreviewLayer)return super.write(s,t);if(t?.messages){const n=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new S("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${n}'`,{layer:this}))}return null}};i([o(gr)],L.prototype,"legendEnabled",null),i([o({type:["show","hide"]})],L.prototype,"listMode",null),i([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],L.prototype,"isReference",void 0),i([o({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],L.prototype,"operationalLayerType",void 0),i([T("web-map","operationalLayerType")],L.prototype,"writeOperationalLayerType",null),i([o(wr)],L.prototype,"popupEnabled",void 0),i([o({type:Rr,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],L.prototype,"popupTemplate",void 0),i([o({readOnly:!0})],L.prototype,"defaultPopupTemplate",null),i([o({readOnly:!0,json:{read:!1}})],L.prototype,"type",void 0),i([o({readOnly:!0})],L.prototype,"_isPreviewLayer",null),L=i([v("esri.layers.ImageryLayer")],L);const As=L;export{As as default};
