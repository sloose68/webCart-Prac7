const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/imageryUtils-BbOSa-rW.js","assets/utils-CmA3lQtM.js","assets/index-C4I_fUP4.js","assets/originUtils-BU7ycxep.js","assets/jsonContext-BD2QNLTd.js","assets/saveUtils-BMzDA9ZV.js","assets/rasterFieldUtils-W7ow6LMJ.js"])))=>i.map(i=>d[i]);
import{bk as D,c8 as H,dp as De,oy as Ae,fN as Be,a2 as T,a3 as O,a4 as Y,eV as Ce,d as C,ai as Fe,b as ve,oz as Le,O as Je,bN as ze,c3 as re,bd as Ue,I as je,a8 as V,D as me,d6 as He,d7 as Ge,eX as We,eY as qe,f7 as Ve,fm as Ye,f6 as Xe,eW as Ke,eZ as Ze,bg as Qe,d8 as et,fo as tt,br as st,hS as at,de as it,fs as se,cw as rt,_ as nt,e$ as ot,cy as lt,ce as Se}from"./index-C4I_fUP4.js";import{$ as Z,i as ue,t as J,n as ke,e as B,o as q,u as ae,X as ct,m as ut}from"./xmlUtilities-BH40CgLT.js";import{d as ft,N as Me}from"./RasterJobHandlerMixin-BJFX3JNB.js";import{c as ht,f as pt,o as dt}from"./RasterPresetRendererMixin-kLYLTVBm.js";import{p as mt,N as gt,o as yt,c as wt,e as xt,j as It,$ as bt,b as vt,k as St,l as Tt,r as Rt,t as _t}from"./rasterFieldUtils-W7ow6LMJ.js";import{c as ne,R as Ot,I as Ct,B as Ft}from"./dataUtils-BE1vp-XR.js";import{m as le,p as kt,h as Pe,g as ye,P as Mt,l as we,r as Pt,b as Te,W as Nt,C as $t,G as Et,e as Re,H as Dt,t as At,N as _e,k as Bt,U as Lt}from"./RasterSymbolizer-DoT-8n5y.js";import{m as xe,n as Jt}from"./PolynomialTransform-BNC35x6J.js";import{T as zt}from"./TilemapCache-DTRqOf4L.js";import{w as Ut,T as jt}from"./rasterFunctionHelper-vr6fIWwy.js";import"./QueueProcessor-9Wrf-STg.js";import"./RawBlockCache-hobtODQJ.js";import"./rasterProjectionHelper-BCxABKio.js";import"./clipUtils-D_LOpSmc.js";import"./ClassBreaksDefinition-Bs5lBACI.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./ByteSizeUnit-BsxeN7wM.js";function Ne(a){return["x","e","east","long","longitude"].includes(a.toLowerCase())}function $e(a){return["y","n","west","lat","latitude"].includes(a.toLowerCase())}function Ht(a){const{axes:e}=a.domain,t=Object.keys(e),s=[],i=[];let r=-1,n=-1,u=[];for(let w=0;w<t.length;w++){const F=t[w];Ne(F)?r=w:$e(F)&&(n=w);const S=e[F],x=[];if("values"in S){S.values.forEach((g=>x.push(typeof g=="string"?new Date(g).getTime():g)));const b=x[1]-x[0];s.push([x[0]-.5*b,x[x.length-1]+.5*b]),i.push(b)}else{const{start:b,stop:g,num:v}=S,R=(g-b)/(v-1);s.push([b-.5*R,g+.5*R]),i.push(R);for(let k=0;k<v;k++)x.push(b+R*k)}u.push({name:F,values:x,extent:[x[0],x[x.length-1]]})}r>-1&&n===-1?n=r===0?1:0:n>-1&&r===-1?r=n===0?1:0:n===-1&&r===-1&&(r=0,n=1),u=u.filter(((w,F)=>!(F===r||F===n)));const{referencing:l}=a.domain,o=l.find((w=>w.coordinates.includes(t[r]))).system.id,c=o?.slice(o.lastIndexOf("/")+1),h=c==null||c==="CRS84"?4326:Number(c),f=new D({wkid:h}),[p,I]=s[r],[y,d]=s[n],m=new H({xmin:p,xmax:I,ymin:y,ymax:d,spatialReference:f});return{width:Math.round(m.width/i[r]),height:Math.round(m.height/i[n]),extent:m,dimensions:u}}function fe(a){const e=Be()?.language;return e?a[e]??Object.values(a)[0]:Object.values(a)[0]}function he(){return Math.round(255*Math.random())}function Gt(a){const e={},{parameters:t}=a;if(!t)return e;for(const[s,i]of Object.entries(t)){const{type:r,description:n,unit:u,categoryEncoding:l,observedProperty:o}=i;if(r==="Parameter"&&(e[s]={},n&&(e[s].description=fe(n)),u&&(e[s].unit=u.label?fe(u.label):null,e[s].symbol=u.symbol?.value),l)){const c=Object.entries(l).map(((p,I)=>({OID:I,Value:Number(p[1]),ClassName:p[0].slice(p[0].lastIndexOf("/")+1),Count:1})));let h=!1;o?.categories?.length&&(o.categories.forEach((p=>{if(!p.id)return;const I=p.id.slice(p.id.lastIndexOf("/")+1),y=c.find((m=>m.ClassName===I));if(!y)return;const d=p.label?fe(p.label):null;if(y.Label=d,p.preferredColor){const m=De.fromHex(p.preferredColor);m&&(h=!0,y.Red=m.r,y.Green=m.g,y.Blue=m.b)}})),h&&c.forEach((p=>{p.Red==null&&(p.Red=he(),p.Green=he(),p.Blue=he())})));const f={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:c.map((p=>({attributes:p})))};h&&f.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[s].attributeTable=f}}return e}function Wt(a){let e=Number.MAX_VALUE,t=-Number.MAX_VALUE;for(let s=0;s<a.length;s++){const i=a[s];i!=null&&(i<e&&(e=i),i>t&&(t=i))}return Ae(e,t)}function qt(a,e,t){const s=a.map(((l,o)=>({name:l,count:e[o]}))).sort(((l,o)=>l.name>o.name?-1:1)),i=(r=1,l=>r*=l.count);var r;const n=[...s.slice(1),{name:"",count:1}].reverse().map(i).reverse();let u=0;for(let l=a.length-1;l>=0;l--)u+=n[s.findIndex((({name:o})=>o===a[l]))]*(t%e[l]),t=Math.floor(t/e[l]);return u}function Vt(a){const{width:e,height:t,extent:s,dimensions:i}=Ht(a),{ranges:r}=a,n=Object.keys(r).sort(((f,p)=>f<p?-1:1)),u=[];for(let f=0;f<n.length;f++){const p=n[f];i?.length&&u.push({name:p,dimensions:i})}const l=Gt(a);u.forEach((f=>l[f.name]&&Object.assign(f,l[f.name])));const o=u.length?{variables:u}:void 0,c=[];for(let f=0;f<n.length;f++){const p=n[f],{values:I,dataType:y,axisNames:d,shape:m}=r[p],w=m.length>2?f*m.slice(0,-2).reduce(((v,R)=>v*R)):0,F=d.slice(0,-2),S=m.slice(0,-2),x=y==="float"?"f32":Wt(I),b=e*t,g=I.length/b;for(let v=0;v<g;v++){const R=ne.createEmptyBand(x,b),k=new Uint8Array(b).fill(255);let _=!1;const P=v*b;for(let M=0;M<b;M++){const $=I[P+M];$==null?(k[M]=0,_=!0):R[M]=$}if(f===0||i?.length){const M=new ne({width:e,height:t,mask:_?k:null,pixels:[R],pixelType:x});M.updateStatistics(),i?.length?c[qt(F,S,v)+w]=M:c.push(M)}else{const M=c[v];M.pixels.push(R),_?M.mask&&(M.mask=ne.combineBandMasks([M.mask,k])):M.mask=_?k:null}}}const h=Object.values(l).find((f=>f.attributeTable))?.attributeTable;return{extent:s,pixelBlocks:c,multidimensionalInfo:o,attributeTable:h,bandNames:o?void 0:n}}let X=class extends Z{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(a,e,t,s={}){if(!this._pixelBlockTiles){const{rasterInfo:r}=this,[n,u]=r.storageInfo.tileInfo.size,{sliceId:l}=s,{pixelBlocks:o}=this.source,c={pixelBlock:l==null?o[0]:o[l],useBilinear:r.dataType!=="thematic",tileSize:{width:n,height:u},level:a,row:e,col:t},h=this.rasterJobHandler?this.rasterJobHandler.clipTile(c,s):Ot(c);return Promise.resolve(h)}const i=this._pixelBlockTiles.get(`${a}/${e}/${t}`);return Promise.resolve(i)}async _open(a){const e=this.source,{pixelBlocks:t,attributeTable:s,statistics:i,histograms:r,name:n,nativeExtent:u,transform:l}=e,o=t[0],{width:c,height:h,pixelType:f}=o,p=e.extent??new H({xmin:-.5,ymin:.5,xmax:c-.5,ymax:h-.5,spatialReference:new D({wkid:3857})}),I=e.isPseudoSpatialReference??!e.extent,y={x:p.width/c,y:p.height/h},d={...e.keyProperties};s&&(d.DataType="Thematic");const m=new le({width:c,height:h,pixelType:f,extent:p,nativeExtent:u,attributeTable:s,transform:l,pixelSize:y,spatialReference:p.spatialReference,bandCount:o.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:I,histograms:r});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(m),this.createRemoteDatasetStorageInfo(m,512,512),this._set("rasterInfo",m),this.updateTileInfo(),m.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,m.multidimensionalInfo):await this._buildInMemoryRaster(o,{width:512,height:512},a),m.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(a,e,t){const{rasterInfo:s}=this,i=s.storageInfo.maximumPyramidLevel??0,r=s.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:a,tileSize:e,maximumPyramidLevel:i,useBilinear:r},t):Promise.resolve(Ct(a,e,i,r)),u=s.statistics!=null,l=s.histograms!=null,o=this.ioConfig.skipStatistics||u?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:a},t):Promise.resolve(kt(a)),c=await Ce([n,o]);if(!c[0].value&&c[1].value)throw new C("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=c[0].value,u||(s.statistics=c[1].value?.statistics),l||(s.histograms=c[1].value?.histograms)}async _buildMDimStats(a,e,t){for(let s=0;s<e.variables.length;s++){const i=e.variables[s];if(i.statistics)continue;const r=i.dimensions.map((o=>new mt({variableName:i.name,dimensionName:o.name,values:[o.values?.[0]??o.extent?.[0]],isSlice:!0}))),n=gt(r,e),u=n==null?null:a[n];if(u==null)continue;const l=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:u},t):Pe(u);i.statistics=l.statistics,i.histograms||(i.histograms=l.histograms)}}};T([O({type:String,json:{write:!0}})],X.prototype,"datasetFormat",void 0),T([O()],X.prototype,"source",void 0),T([O()],X.prototype,"url",null),X=T([Y("esri.layers.support.rasterDatasets.InMemoryRaster")],X);const Ie=X;let Q=class extends Z{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(e,t,s,i={}){return this._inMemoryRaster.fetchRawTile(e,t,s,i)}async _open(e){const{extent:t,pixelBlocks:s,multidimensionalInfo:i,attributeTable:r,bandNames:n}=await this._fetchData(e),{statistics:u,histograms:l}=Pe(s[0]),o=n?.map((p=>({BandName:p}))),c={DataType:r?"Thematic":i?"Scientific":"Generic",BandProperties:o},h=new Ie({source:{extent:t,pixelBlocks:s,attributeTable:r?Fe.fromJSON(r):null,multidimensionalInfo:i,statistics:u,histograms:l,keyProperties:c,isPseudoSpatialReference:!1}});await h.open(),this._inMemoryRaster=h;const f=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",f.slice(0,f.indexOf("."))),this._set("rasterInfo",h.rasterInfo)}async _fetchData(e){const t=this.source??(await this.request(this.url,{signal:e?.signal})).data,s="imagery-tile-layer:open-coverage-json";if(t.type?.toLowerCase()!=="coverage"||t.domain?.domainType?.toLowerCase()!=="grid")throw new C(s,"Only coverage with Grid domain type is supported");if(!t.ranges)throw new C(s,"Missing ranges in the grid coverage data");if(!t.domain.referencing?.length)throw new C(s,"Missing domain referencing in the grid coverage data");const i=Object.values(t.ranges);for(let r=0;r<i.length;r++){const{axisNames:n,shape:u,type:l,values:o}=i[r];if(!(l.toLowerCase()==="ndarray"&&o?.length&&n?.length&&u?.length))throw new C(s,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(Ne(n[n.length-1])&&$e(n[n.length-2])))throw new C(s,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return Vt(t)}};T([O({type:String,json:{write:!0}})],Q.prototype,"datasetFormat",void 0),T([O({constructOnly:!0})],Q.prototype,"source",void 0),Q=T([Y("esri.layers.support.rasterDatasets.CovJSONRaster")],Q);const Yt=Q;function Oe(a,e){if(!a||!e)return null;const t=[];for(let s=0;s<a.length;s++)t.push(a[s]),t.push(e[s]);return t}function Xt(a){const e=B(a,"GeodataXform"),t=ce(q(e,"SpatialReference/WKID")||J(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:t,transform:null};const s=q(e,"PolynomialOrder")??1,i=ae(e,"CoeffX/Double"),r=ae(e,"CoeffY/Double"),n=ae(e,"InverseCoeffX/Double"),u=ae(e,"InverseCoeffY/Double"),l=Oe(i,r),o=Oe(n,u);return{spatialReference:t,transform:l&&o&&l.length&&o.length?new xe({spatialReference:t,polynomialOrder:s,forwardCoefficients:l,inverseCoefficients:o}):null}}function Kt(a){const e=q(a,"NoDataValue"),t=B(a,"Histograms/HistItem"),s=q(t,"HistMin"),i=q(t,"HistMax"),r=q(t,"BucketCount"),n=J(t,"HistCounts")?.split("|").map((f=>Number(f)));let u,l,o,c;ke(a,"Metadata/MDI").forEach((f=>{const p=Number(f.textContent??f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":u=p;break;case"STATISTICS_MAXIMUM":l=p;break;case"STATISTICS_MEAN":o=p;break;case"STATISTICS_STDDEV":c=p}}));const h=q(a,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&s!=null&&i!=null?{min:s,max:i,size:r||n.length,counts:n}:null,sourceBandIndex:h,statistics:u!=null&&l!=null?{min:u,max:l,avg:o,stddev:c}:null}}function ce(a){if(!a)return null;let e=Number(a);if(!isNaN(e)&&e!==0)return new D({wkid:e});if(a=String(a).trim(),Le(a))return new D({wkt2:a});const t=a.toUpperCase();if(t.startsWith("COMPD_CS")){if(!t.includes("VERTCS")||!t.includes("GEOGCS")&&!t.startsWith("PROJCS"))return null;const s=t.indexOf("VERTCS"),i=t.indexOf("PROJCS"),r=i>-1?i:t.indexOf("GEOGCS");if(r===-1)return null;const n=a.slice(r,a.lastIndexOf("]",s)+1).trim(),u=a.slice(s,a.lastIndexOf("]")).trim();e=pe(n);const l=new D(e?{wkid:e}:{wkt:n}),o=pe(u);return o&&(l.vcsWkid=o),l}return t.startsWith("GEOGCS")||t.startsWith("PROJCS")?(e=pe(a),new D(e!==0?{wkid:e}:{wkt:a})):null}function pe(a){const e=a.replaceAll("]","[").replaceAll('"',"").split("[").map((i=>i.trim())).filter((i=>i!=="")),t=e[e.length-1].split(","),s=t[0]?.toLowerCase();if((s==="epsg"||s==="esri")&&a.endsWith('"]]')){const i=Number(t[1]);if(!isNaN(i)&&i!==0)return i}return 0}function be(a){if(a?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};a.documentElement.childNodes.forEach((s=>{if(s.nodeType===1){if(ue(s,"SRS")){if(!e.spatialReference){const i=J(s);e.spatialReference=ce(i)}}else if(ue(s,"Metadata"))if(s.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:r}=Xt(s);e.transform=r,e.spatialReference||(e.spatialReference=i)}else ke(s,"MDI").forEach((i=>e.metadata[i.getAttribute("key")]=J(i)));else if(ue(s,"PAMRasterBand")){const i=Kt(s);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}}));const t=e.rasterBands;if(t.length){const s=!!t[0].statistics;e.statistics=s?t.map((r=>r.statistics)).filter(ve):null;const i=!!t[0].histogram;e.histograms=i?t.map((r=>r.histogram)).filter(ve):null}return e}let oe=class extends Z{fetchRawTile(a,e,t,s={}){return this._inMemoryRaster.fetchRawTile(a,e,t,s)}async _open(a){const e=await this._fetchData(a);let{spatialReference:t,statistics:s,histograms:i,transform:r}=await this._fetchAuxiliaryData(a);const n=!t;n&&(t=new D({wkid:3857})),i?.length&&s==null&&(s=ye(i));const{width:u,height:l}=e;let o=new H({xmin:-.5,ymin:.5-l,xmax:u-.5,ymax:.5,spatialReference:t});const c=r?r.forwardTransform(o):o;let h=!0;if(r){const p=r.forwardCoefficients;h=p&&p[1]===0&&p[2]===0,h&&(r=null,o=c)}const f=new Ie({source:{extent:c,nativeExtent:o,transform:r,pixelBlocks:[e],statistics:s,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(f.ioConfig.skipMapInfo=!0),await f.open(),f.source=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}async _fetchData(a){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:a?.signal}),t=Mt(e).toUpperCase();if(t!=="JPG"&&t!=="PNG"&&t!=="GIF"&&t!=="BMP")throw new C("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",t);const s=t.toLowerCase(),i=s==="gif"||s==="bmp"||!Je("ios"),r=await this.decodePixelBlock(e,{format:s,useCanvas:i,hasNoZlibMask:!0});if(r==null)throw new C("image-aux-raster:open","the data cannot be decoded");return r}async _fetchAuxiliaryData(a){const e=a?.signal,{skipExtensions:t=[],skipMapInfo:s}=this.ioConfig,i=s||t.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,u=n&&t.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),l=await Ce([i,u]);if(e?.aborted)throw ze();const o=be(l[0].value?.data);if(!o.transform){const c=l[1].value?l[1].value.data.split(`
`).slice(0,6).map((h=>Number(h))):null;o.transform=c?.length===6?new xe({forwardCoefficients:[c[4],c[5],c[0],-c[1],c[2],-c[3]]}):null}return o}};T([O({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=T([Y("esri.layers.support.rasterDatasets.ImageAuxRaster")],oe);const ie=oe;let ee=class extends Z{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(a,e,t,s={}){const{storageInfo:i,extent:r}=this.rasterInfo,{transposeInfo:n}=i,u=n!=null&&!!s.transposedVariableName;if(this._slices&&!u&&s.sliceId==null)return null;const l=u?0:i.maximumPyramidLevel-a+this._levelOffset,o=`${this.url}/tile/${l}/${e}/${t}`,c=this._slices?u?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null;let h,f;if(i.isBsqTile){const M=(s.bandIds?.length?s.bandIds:[0,1,2]).map((z=>this.request(o,{query:{...c,bandId:z},responseType:"array-buffer",signal:s.signal}))),$=await Promise.all(M),L=$.map((z=>z.data.byteLength)).reduce(((z,Ee)=>z+Ee)),G=new Uint8Array(L);f=[];let W=0;for(const{data:z}of $)f.push(W),G.set(new Uint8Array(z),W),W+=z.byteLength;h=G.buffer}else h=(await this.request(o,{query:c,responseType:"array-buffer",signal:s.signal})).data;if(!h)return null;const p=u?n.tileSize:i.tileInfo.size,I=await this.decodePixelBlock(h,{width:p[0],height:p[1],planes:f?.length,offsets:f,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:u,noDataValue:this.rasterInfo.noDataValue});if(I==null)return null;const y=i.blockBoundary[a];if(i.compression!=="jpg"||t>y.minCol&&t<y.maxCol&&e>y.minRow&&e<y.maxRow)return I;const{origin:d,blockWidth:m,blockHeight:w}=i,{x:F,y:S}=this.getPyramidPixelSize(a),x=Math.round((r.xmin-d.x)/F)%m,b=Math.round((r.xmax-d.x)/F)%m||m,g=Math.round((d.y-r.ymax)/S)%w,v=Math.round((d.y-r.ymin)/S)%w||w,R=t===y.minCol?x:0,k=e===y.minRow?g:0,_=t===y.maxCol?b:m,P=e===y.maxRow?v:w;return Ft(I,{x:R,y:k},{width:_-R,height:P-k}),I}getSliceIndex(a){if(!this._slices||a==null||a.length===0)return null;const e=a;for(let t=0;t<this._slices.length;t++){const s=this._slices[t].multidimensionalDefinition;if(s.length===e.length&&!s.some((i=>{const r=e.find((n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName));return r?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0]):!0})))return t}return null}async fetchVariableStatisticsHistograms(a,e){const t=this.request(this.url+"/statistics",{query:{variable:a,f:"json"},signal:e}).then((r=>r.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:a,f:"json"},signal:e}).then((r=>r.data?.histograms)),i=await Promise.all([t,s]);return i[0]&&i[0].forEach((r=>{r.avg=r.mean,r.stddev=r.standardDeviation})),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(a,e={}){if(!this._tilemapCache)return 0;let t=this.identifyPixelLocation(a,0,e.datumTransformation);if(t===null)return null;let s=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let r=i-s+this._levelOffset;const n=t.srcLocation;for(;r>=0;){try{if(await this._tilemapCache.fetchAvailability(r,t.row,t.col,e)==="available")break}catch{}if(r--,s++,t=this.identifyPixelLocation(n,s,e.datumTransformation),t===null)return null}return r===-1||t==null?null:s}async _open(a){const e=a?.signal,t=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});t.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=t.data;if(this.sourceJSON=s,!s)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new C("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,this.tileType==null&&(i.includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":s.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name?.slice(s.name.indexOf("/")+1)??"";const r=await this._fetchRasterInfo({signal:e});if(r==null)throw new C("image-server-raster:open","cannot initialize image service");ht(r,s);const n=this.tileType==="Map"?Zt(s.tileInfo,s):re.fromJSON(s.tileInfo);Ue(n);const[u,l]=this._computeMinMaxLOD(r,n),{extent:o,pixelSize:c}=r,h=.5/r.width*c.x,f=Math.max(c.x,c.y),{lods:p}=n;(this.tileType!=="Map"&&s.maxScale!==0||Math.abs(c.x-c.y)>h||!p.some((g=>Math.abs(g.resolution-f)<h)))&&(c.x=c.y=u.resolution,r.width=Math.ceil((o.xmax-o.xmin)/c.x-.1),r.height=Math.ceil((o.ymax-o.ymin)/c.y-.1));const I=u.level-l.level,[y,d]=n.size,m=[],w=[];p.forEach(((g,v)=>{g.level>=l.level&&g.level<=u.level&&m.push({x:g.resolution,y:g.resolution}),v<p.length-1&&w.push(Math.round(10*g.resolution/p[v+1].resolution)/10)})),m.sort(((g,v)=>g.x-v.x));const F=this.computeBlockBoundary(o,y,d,n.origin,m,I),S=m.length>1?m.slice(1):null;let x;s.transposeInfo&&(x={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:r.keyProperties?._yxs.PacketSize??0});const b=w.length<=1||w.length>=3&&w.slice(0,-1).every((g=>g===w[0]))?w[0]??2:Math.round(10/(l.resolution/u.resolution)**(-1/I))/10;if(r.storageInfo=new we({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:S,pyramidScalingFactor:b,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:I,tileInfo:n,isBsqTile:!!s.bsq,transposeInfo:x,blockBoundary:F}),Qt(r),this._set("rasterInfo",r),s.capabilities.toLowerCase().includes("tilemap")){const g={tileInfo:r.storageInfo.tileInfo,parsedUrl:je(this.url),url:this.url,tileServers:[]};this._tilemapCache=new zt({layer:g})}}async _fetchRasterInfo(a){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,u=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),l=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),o=D.fromJSON(e.spatialReference||n.spatialReference),c=new V({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:o});return new le({width:u,height:l,bandCount:3,extent:H.fromJSON(n),spatialReference:o,pixelSize:c,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:t}=a,s=pt(this.url,this.sourceJSON,{signal:t,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:t}).then((n=>n.data?.slices)).catch((()=>null)):null,r=await Promise.all([s,i]);return this._slices=r[1],r[0]}_fixScaleInServiceInfo(){const{sourceJSON:a}=this;a.minScale&&a.minScale<0&&(a.minScale=0),a.maxScale&&a.maxScale<0&&(a.maxScale=0)}_computeMinMaxLOD(a,e){const{pixelSize:t}=a,s=.5/a.width*t.x,{lods:i}=e,r=e.lodAt(Math.max.apply(null,i.map((f=>f.level)))),n=e.lodAt(Math.min.apply(null,i.map((f=>f.level)))),{tileType:u}=this;if(u==="Map")return this._levelOffset=i[0].level,[r,n];if(u==="Raster")return[i.find((f=>f.resolution===t.x))??r,n];const{minScale:l,maxScale:o}=this.sourceJSON;let c=r;o>0&&(c=i.find((f=>Math.abs(f.scale-o)<s)),c||(c=i.filter((f=>f.scale>o)).sort(((f,p)=>f.scale>p.scale?1:-1))[0]??r));let h=n;return l>0&&(h=i.find((f=>Math.abs(f.scale-l)<s))??n,this._levelOffset=h.level-n.level),[c,h]}};function Zt(a,e){if(!a)return null;const{minScale:t,maxScale:s,minLOD:i,maxLOD:r}=e;if(i!=null&&r!=null)return re.fromJSON({...a,lods:a.lods.filter((({level:n})=>n!=null&&n>=i&&n<=r))});if(t!==0&&s!==0){const n=o=>Math.round(1e4*o)/1e4,u=t?n(t):1/0,l=s?n(s):-1/0;return re.fromJSON({...a,lods:a.lods.filter((o=>{const c=n(o.scale);return c<=u&&c>=l}))})}return re.fromJSON(a)}function Qt(a){const{extent:e,spatialReference:t}=a;e.xmin>-1&&e.xmax>181&&t?.wkid&&t.isGeographic&&(a.nativeExtent=a.extent,a.transform=new Jt,a.extent=a.transform.forwardTransform(e))}T([O({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),T([O()],ee.prototype,"tileType",void 0),ee=T([Y("esri.layers.support.rasterDatasets.ImageServerRaster")],ee);const es=ee,A=new Map;A.set("Int8","s8"),A.set("UInt8","u8"),A.set("Int16","s16"),A.set("UInt16","u16"),A.set("Int32","s32"),A.set("UInt32","u32"),A.set("Float32","f32"),A.set("Float64","f32"),A.set("Double64","f32");const j=new Map;j.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),j.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),j.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),j.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let K=class extends Z{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(a,e,t,s={}){const{blockWidth:i,blockHeight:r,blockBoundary:n}=this.rasterInfo.storageInfo,u=n[a];if(!u||u.maxRow<e||u.maxCol<t||u.minRow>e||u.minCol>t)return null;const{bandCount:l,pixelType:o}=this.rasterInfo,{ranges:c,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(a,e,t);if(!c||c.length===0)return null;if(c[0].from===0&&c[0].to===0){const _=new Uint8Array(i*r);return new ne({width:i,height:r,pixels:void 0,mask:_,validPixelCount:0})}const{bandIds:p}=this.ioConfig,I=this._getBandSegmentCount(),y=[];let d=0;for(d=0;d<I;d++)p&&!p.includes(d)||y.push(this.request(this._files.data,{range:{from:c[d].from,to:c[d].to},responseType:"array-buffer",signal:s.signal}));const m=await Promise.all(y),w=m.map((_=>_.data.byteLength)).reduce(((_,P)=>_+P)),F=new Uint8Array(w),S=[];let x=0;for(d=0;d<I;d++)S.push(x),F.set(new Uint8Array(m[d].data),x),x+=m[d].data.byteLength;const b=j.get(this.rasterInfo.storageInfo.compression).decoderFormat,g=await this.decodePixelBlock(F.buffer,{width:i,height:r,format:b,planes:p?.length||l,offsets:S,pixelType:o});if(g==null)return null;let{noDataValue:v}=this.rasterInfo;if(v!=null&&b!=="lerc"&&!g.mask&&(v=v[0],v!=null)){const _=g.width*g.height,P=new Uint8Array(_);if(Math.abs(v)>1e24)for(d=0;d<_;d++)Math.abs((g.pixels[0][d]-v)/v)>1e-6&&(P[d]=1);else for(d=0;d<_;d++)g.pixels[0][d]!==v&&(P[d]=1);g.mask=P}let R=0,k=0;if(h!==i||f!==r){let _=g.mask;if(_)for(d=0;d<r;d++)if(k=d*i,d<f)for(R=h;R<i;R++)_[k+R]=0;else for(R=0;R<i;R++)_[k+R]=0;else for(_=new Uint8Array(i*r),g.mask=_,d=0;d<f;d++)for(k=d*i,R=0;R<h;R++)_[k+R]=1}return g}async _open(a){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=a?a.signal:null,t=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:s,files:i}=this._parseHeader(t.data),{skipMapInfo:r,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!r){const m=await this._fetchAuxiliaryData(a);m!=null&&(s.statistics=m.statistics??s.statistics,s.histograms=m.histograms,m.histograms&&s.statistics==null&&(s.statistics=ye(m.histograms)))}r&&this.updateImageSpaceRasterInfo(s),this._set("rasterInfo",s),this._files=i;const u=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=ts(u.data);const{blockWidth:l,blockHeight:o}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:h,height:f}=this.rasterInfo,p=[],I=this._getBandSegmentCount();let y=0,d=-1;for(;y<this._storageIndex.length;){d++;const m=Math.ceil(h/l/c**d)-1,w=Math.ceil(f/o/c**d)-1;y+=(m+1)*(w+1)*I*4,p.push({maxRow:w,maxCol:m,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=p,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return j.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(a,e,t){const{blockWidth:s,blockHeight:i,pyramidScalingFactor:r}=this.rasterInfo.storageInfo,{width:n,height:u}=this.rasterInfo,l=this._getBandSegmentCount();let o,c,h,f=0,p=0;for(h=0;h<a;h++)p=r**h,o=Math.ceil(n/s/p),c=Math.ceil(u/i/p),f+=o*c;p=r**a,o=Math.ceil(n/s/p),c=Math.ceil(u/i/p),f+=e*o+t,f*=4*l;const I=this._storageIndex.subarray(f,f+4*l);let y=0,d=0;const m=[];for(let w=0;w<l;w++)y=I[4*w]*2**32+I[4*w+1],d=y+I[4*w+2]*2**32+I[4*w+3],m.push({from:y,to:d});return{ranges:m,actualTileWidth:t<o-1?s:Math.ceil(n/p)-s*(o-1),actualTileHeight:e<c-1?i:Math.ceil(u/p)-i*(c-1)}}_parseHeader(a){const e=B(a,"MRF_META/Raster");if(!e)throw new C("mrf:open","not a valid MRF format");const t=B(e,"Size"),s=parseInt(t.getAttribute("x"),10),i=parseInt(t.getAttribute("y"),10),r=parseInt(t.getAttribute("c"),10),n=(J(e,"Compression")||"none").toLowerCase();if(!j.has(n))throw new C("mrf:open","currently does not support compression "+n);const u=J(e,"DataType")||"UInt8",l=A.get(u);if(l==null)throw new C("mrf:open","currently does not support pixel type "+u);const o=B(e,"PageSize"),c=parseInt(o.getAttribute("x"),10),h=parseInt(o.getAttribute("y"),10),f=B(e,"DataValues");let p,I;if(f&&(I=f.getAttribute("NoData"),I!=null&&(p=I.trim().split(" ").map((_=>parseFloat(_))))),B(a,"MRF_META/CachedSource"))throw new C("mrf:open","currently does not support MRF referencing other data files");const y=B(a,"MRF_META/GeoTags"),d=B(y,"BoundingBox");let m,w=!1;if(d!=null){const _=parseFloat(d.getAttribute("minx")),P=parseFloat(d.getAttribute("miny")),M=parseFloat(d.getAttribute("maxx")),$=parseFloat(d.getAttribute("maxy")),L=J(y,"Projection")||"";let G=D.WGS84;if(L!=="LOCAL_CS[]")if(L.toLowerCase().startsWith("epsg:")){const W=Number(L.slice(5));isNaN(W)||W===0||(G=new D({wkid:W}))}else G=ce(L)??D.WGS84;else w=!0,G=new D({wkid:3857});m=new H(_,P,M,$),m.spatialReference=G}else w=!0,m=new H({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:new D({wkid:3857})});const F=B(a,"MRF_META/Rsets"),S=parseInt(F?.getAttribute("scale")||"2",10),x=m.spatialReference,b=new we({origin:new V({x:m.xmin,y:m.ymax,spatialReference:x}),blockWidth:c,blockHeight:h,pyramidBlockWidth:c,pyramidBlockHeight:h,compression:n,pyramidScalingFactor:S}),g=new V({x:m.width/s,y:m.height/i,spatialReference:x}),v=new le({width:s,height:i,extent:m,isPseudoSpatialReference:w,spatialReference:x,bandCount:r,pixelType:l,pixelSize:g,noDataValue:p,storageInfo:b}),R=J(a,"datafile"),k=J(a,"IndexFile");return{rasterInfo:v,files:{mrf:this.url,index:k||this.url.replace(".mrf",".idx"),data:R||this.url.replace(".mrf",j.get(n).blobExtension)}}}async _fetchAuxiliaryData(a){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:a?.signal});return be(e)}catch{return null}}};function ts(a){if(a.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,t,s,i,r,n;if(Pt){for(t=new Uint8Array(a),i=new ArrayBuffer(a.byteLength),s=new Uint8Array(i),r=0;r<a.byteLength/4;r++)for(n=0;n<4;n++)s[4*r+n]=t[4*r+3-n];e=new Uint32Array(i)}else e=new Uint32Array(a);return e}T([O()],K.prototype,"_files",void 0),T([O()],K.prototype,"_storageIndex",void 0),T([O({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),K=T([Y("esri.layers.support.rasterDatasets.MRFRaster")],K);const ss=K;function as(a){const e=a.fields,t=a.records,s=e.some((o=>o.name.toLowerCase()==="oid"))?"OBJECTID":"OID",i=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map((o=>({name:o.name,type:"esriFieldType"+o.typeName,alias:o.name})))),r=i.map((o=>o.name)),n=[];let u=0,l=0;return t.forEach((o=>{const c={};for(c[s]=u++,l=1;l<r.length;l++)c[r[l]]=o[l-1];n.push({attributes:c})})),{displayFieldName:"",fields:i,features:n}}class is{static get supportedVersions(){return[5]}static parse(e){const t=new DataView(e),s=3&t.getUint8(0);if(s!==3)return{header:{version:s},recordSet:null};const i=t.getUint32(4,!0),r=t.getUint16(8,!0),n=t.getUint16(10,!0),u={version:s,recordCount:i,headerByteCount:r,recordByteCount:n};let l=32;const o=[],c=[];let h;if(s===3){for(;t.getUint8(l)!==13;)h=String.fromCharCode(t.getUint8(l+11)).trim(),o.push({name:Te(new Uint8Array(e,l,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:t.getUint8(l+16)}),l+=32;if(l+=1,o.length>0)for(;c.length<i&&e.byteLength-l>n;){const f=[];t.getUint8(l)===32?(l+=1,o.forEach((p=>{if(p.type==="C")f.push(Te(new Uint8Array(e,l,p.length)).trim());else if(p.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim(),10));else if(p.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim()));else if(p.type==="D"){const I=String.fromCharCode.apply(null,new Uint8Array(e,l,p.length)).trim();f.push(new Date(parseInt(I.slice(0,4),10),parseInt(I.slice(4,6),10)-1,parseInt(I.slice(6,8),10)))}l+=p.length})),c.push(f)):l+=n}}return{header:u,fields:o,records:c,recordSet:as({fields:o,records:c})}}}const ge=(a,e)=>a.get(e)?.values,te=(a,e)=>a.get(e)?.values?.[0];let U=class extends Z{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this._chunkSize=10485760,this.datasetFormat="TIFF"}async fetchRawTile(e,t,s,i={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,s))return null;const r=await this._fetchRawTiffTile(e,t,s,!1,i);if(r!=null&&this._headerInfo.hasMaskBand){const n=await this._fetchRawTiffTile(e,t,s,!0,i);n!=null&&n.pixels[0]instanceof Uint8Array&&(r.mask=n.pixels[0])}return r}async _open(e){const t=e?e.signal:null,{data:s}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!s)throw new C("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:i,firstIFDPos:r,isBigTiff:n}=Nt(s),u=[],l={fileChunk:s,posIFD:r,fileOffset:0};await this._readIFDs(u,l,i,n?8:4,t);const{imageInfo:o,rasterInfo:c}=rs(u),h=$t(u),f=Et(u);if(this._headerInfo={littleEndian:i,isBigTiff:n,ifds:u,pyramidIFDs:h,maskIFDs:f,...o},this._set("rasterInfo",c),!o.isSupported)throw new C("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new C("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");c.isPseudoSpatialReference&&me.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const p=u[0].get("PREDICTOR")?.values?.[0];if(u[0].get("SAMPLEFORMAT")?.values?.[0]===3&&p===2)throw new C("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:y,skipExtensions:d=[]}=this.ioConfig;if(!d.includes("aux.xml")&&!y){const m=await this._fetchAuxiliaryMetaData(e);m!=null&&ns(m,c)}d.includes("vat.dbf")||c.bandCount!==1||c.pixelType!=="u8"||y||(c.attributeTable=await this._fetchAuxiliaryTable(e),c.attributeTable!=null&&(c.keyProperties.DataType="thematic")),y&&this.updateImageSpaceRasterInfo(c),this.updateTileInfo()}async _validateOrFetchHeaderBuffer(e,t){let{fileChunk:s,fileOffset:i,posIFD:r}=e;return(r+8>=s.byteLength||r<0)&&(i=r+i,s=(await this.request(this.url,{range:{from:i,to:i+this._bufferSize},responseType:"array-buffer",signal:t})).data,r=0),{fileChunk:s,fileOffset:i,posIFD:r}}async _readIFDs(e,t,s,i=4,r){if(!t.posIFD)return null;t=await this._validateOrFetchHeaderBuffer(t,r);const n=await this._readIFD(t,s,Re,i,r);if(!n?.ifd)throw new C("tiffraster:open","cannot parse tiff header. failed to open url "+this.url);if(e.push(n.ifd),!n.nextIFD)return null;t.posIFD=n.nextIFD-t.fileOffset,await this._readIFDs(e,t,s,i,r)}async _readIFD(e,t,s=Re,i=4,r){let{fileChunk:n,posIFD:u,fileOffset:l}=e;if(!e.fileChunk)return null;const o=Dt(n,t,u,l,s,i);if(o.success){const c=[];if(o.ifd?.forEach((h=>{h.values||c.push(h)})),c.length>0&&await this._fillOffsets(c,t,o.nextIFD,r),o.ifd?.has("GEOKEYDIRECTORY")){const h=o.ifd.get("GEOKEYDIRECTORY"),f=h?.values;if(f&&f.length>4){const p=f[0]+"."+f[1]+"."+f[2];u=h.valueOffset+6-l;const I=await this._validateOrFetchHeaderBuffer({fileChunk:n,posIFD:u,fileOffset:l},r),y=await this._readIFD(I,t,At,2,r);h.data=y?.ifd,h.data&&h.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[p]})}}return o}return o.requiredBufferSize?(n=(await this.request(this.url,{range:{from:l,to:l+u+o.requiredBufferSize+8},responseType:"array-buffer",signal:r})).data,n.byteLength<u+o.requiredBufferSize?null:(e.fileChunk=n,e.fileOffset=l,this._readIFD(e,t,s,i,r))):null}async _fillOffsets(e,t,s,i){const r=e.filter((h=>h.offlineOffsetSize!=null));if(r.length===0)return;const n=r.map((h=>h.offlineOffsetSize)),u=Math.min.apply(null,n.map((h=>h[0]))),l=Math.max.apply(null,n.map((h=>h[0]+h[1])));let o=n.length===1||l-u<=this._bufferSize;if(!o&&n.length>1&&(n.sort(((h,f)=>h[0]-f[0])),o=n.reduce(((h,f)=>h===f[0]?f[0]+f[1]:0),n[0][0])===l),o){const h=await this._fetchOffsets(u,Math.max(l,u+this._bufferSize),i);return void r.forEach((f=>_e(h,t,f,u)))}const c=r.map((async h=>{const f=h.offlineOffsetSize,p=await this._fetchOffsets(f[0],f[1]+f[0],i);_e(p,t,h,f[0])}));await Promise.all(c)}async _fetchOffsets(e,t,s){const i=[],r=this._chunkSize,n=Math.ceil((t-e)/r);let u=e;for(let c=0;c<n;c++)i.push(this.request(this.url,{range:{from:u,to:c===n-1?t:u+r-1},responseType:"array-buffer",signal:s})),u+=r;const l=await Promise.all(i);if(n===1)return l[0].data;const o=new Uint8Array(t-e+1);for(let c=0;c<n;c++)o.set(new Uint8Array(l[c].data),c*r);return o.buffer}async _fetchRawTiffTile(e,t,s,i,r={}){const n=this._getTileLocation(e,t,s,i);if(!n)return null;const{ranges:u,actualTileWidth:l,actualTileHeight:o,ifd:c}=n,h=u.map((g=>this.request(this.url,{range:g,responseType:"array-buffer",signal:r.signal}))),f=await Promise.all(h),p=f.map((g=>g.data.byteLength)).reduce(((g,v)=>g+v)),I=f.length===1?f[0].data:new ArrayBuffer(p),y=[0],d=[0];if(f.length>1){const g=new Uint8Array(I);for(let v=0,R=0;v<f.length;v++){const k=f[v].data;g.set(new Uint8Array(k),R),y[v]=R,R+=k.byteLength,d[v]=k.byteLength}}const{blockWidth:m,blockHeight:w}=this.getBlockWidthHeight(e),F=await this.decodePixelBlock(I,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:d},width:m,height:w,planes:null,pixelType:null});if(F==null)return null;let S,x,b;if(l!==m||o!==w){let g=F.mask;if(g)for(S=0;S<w;S++)if(b=S*m,S<o)for(x=l;x<m;x++)g[b+x]=0;else for(x=0;x<m;x++)g[b+x]=0;else for(g=new Uint8Array(m*w),F.mask=g,S=0;S<o;S++)for(b=S*m,x=0;x<l;x++)g[b+x]=1}return F}_getTileLocation(e,t,s,i=!1){const{firstPyramidLevel:r,blockBoundary:n}=this.rasterInfo.storageInfo,u=e===0?0:e-(r-1),{_headerInfo:l}=this;if(!l)return null;const o=i?l.maskIFDs[u]:u===0?l?.ifds[0]:l?.pyramidIFDs[u-1];if(!o)return null;const c=Bt(o,l),h=ge(o,"TILEOFFSETS");if(h===void 0)return null;const f=ge(o,"TILEBYTECOUNTS"),{minRow:p,minCol:I,maxRow:y,maxCol:d}=n[u];if(t>y||s>d||t<p||s<I)return null;const m=te(o,"IMAGEWIDTH"),w=te(o,"IMAGELENGTH"),F=te(o,"TILEWIDTH"),S=te(o,"TILELENGTH"),x=[];if(c){const{bandCount:b}=this.rasterInfo;for(let g=0;g<b;g++){const v=g*(y+1)*(d+1)+t*(d+1)+s;x[g]={from:h[v],to:h[v]+f[v]-1}}}else{const b=t*(d+1)+s;x.push({from:h[b],to:h[b]+f[b]-1})}for(let b=0;b<x.length;b++)if(x[b].from==null||!x[b].to||x[b].to<0)return null;return{ranges:x,ifd:o,actualTileWidth:s===d&&m%F||F,actualTileHeight:t===y&&w%S||S}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return be(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),s=is.parse(t);return s?.recordSet?Fe.fromJSON(s.recordSet):null}catch{return null}}};function rs(a){const e=Lt(a),{width:t,height:s,tileWidth:i,tileHeight:r,planes:n,pixelType:u,compression:l,firstPyramidLevel:o,maximumPyramidLevel:c,pyramidBlockWidth:h,pyramidBlockHeight:f,pyramidResolutions:p,tileBoundary:I,affine:y,metadata:d}=e,m=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let w=ce(m),F=!!e.isPseudoGeographic;w==null&&(F=!0,w=new D({wkid:3857}));const S=new H({...e.extent,spatialReference:w}),x=new V(S?{x:S.xmin,y:S.ymax,spatialReference:w}:{x:0,y:0}),b=new we({blockWidth:i,blockHeight:r,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:l,origin:x,firstPyramidLevel:o,maximumPyramidLevel:c,pyramidResolutions:p,blockBoundary:I}),g=new V({x:(S.xmax-S.xmin)/t,y:(S.ymax-S.ymin)/s,spatialReference:w}),v=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let R=null;const k=te(a[0],"PHOTOMETRICINTERPRETATION"),_=ge(a[0],"COLORMAP");if(k<=3&&_?.length>3&&_.length%3==0){R=[];const M=_.length/3;for(let $=0;$<M;$++)R.push([$,_[$]>>>8,_[$+M]>>>8,_[$+2*M]>>>8])}const P=new le({width:t,height:s,bandCount:n,pixelType:u,pixelSize:g,storageInfo:b,spatialReference:w,isPseudoSpatialReference:F,keyProperties:v,extent:S,colormap:R,statistics:d?d.statistics:null});if(y?.length&&(P.nativeExtent=new H({xmin:-.5,ymin:.5-s,xmax:t-.5,ymax:.5,spatialReference:w}),P.transform=new xe({polynomialOrder:1,forwardCoefficients:[y[2]+y[0]/2,y[5]-y[3]/2,y[0],y[3],-y[1],-y[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new V({x:(S.xmax-S.xmin)/t,y:(S.ymax-S.ymin)/s,spatialReference:w}),b.origin.x=-.5,b.origin.y=.5),p){const{x:M,y:$}=P.pixelSize;p.forEach((L=>{L.x*=M,L.y*=$}))}return{imageInfo:e,rasterInfo:P}}function ns(a,e){if(e.statistics=a.statistics??e.statistics,e.histograms=a.histograms,a.histograms&&e.statistics==null&&(e.statistics=ye(a.histograms)),a.transform&&e.transform==null){e.transform=a.transform,e.nativeExtent=e.extent;const t=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new V({x:(t.xmax-t.xmin)/e.width,y:(t.ymax-t.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=t}e.isPseudoSpatialReference&&a.spatialReference&&(e.spatialReference=a.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}T([O()],U.prototype,"_files",void 0),T([O()],U.prototype,"_headerInfo",void 0),T([O()],U.prototype,"_bufferSize",void 0),T([O()],U.prototype,"_chunkSize",void 0),T([O({type:String,json:{write:!0}})],U.prototype,"datasetFormat",void 0),U=T([Y("esri.layers.support.rasterDatasets.TIFFRaster")],U);const os=U,E=new Map;E.set("MRF",{desc:"Meta Raster Format",constructor:ss}),E.set("TIFF",{desc:"GeoTIFF",constructor:os}),E.set("RasterTileServer",{desc:"Raster Tile Server",constructor:es}),E.set("JPG",{desc:"JPG Raster Format",constructor:ie}),E.set("PNG",{desc:"PNG Raster Format",constructor:ie}),E.set("GIF",{desc:"GIF Raster Format",constructor:ie}),E.set("BMP",{desc:"BMP Raster Format",constructor:ie}),E.set("CovJSON",{desc:"COVJSON Raster Format",constructor:Yt}),E.set("MEMORY",{desc:"In Memory Raster Format",constructor:Ie});class de{static get supportedFormats(){const e=new Set;return E.forEach(((t,s)=>e.add(s))),e}static async open(e){const{url:t,ioConfig:s,source:i,sourceJSON:r}=e;let n=e.datasetFormat??s?.datasetFormat;n==null&&(t.includes(".")?n=t.slice(t.lastIndexOf(".")+1).toUpperCase():i?.type?.toLowerCase()==="coverage"?n="CovJSON":i?.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),t.toLowerCase().includes("/imageserver")&&!t.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const u={url:t,source:i,sourceJSON:r,datasetFormat:n,ioConfig:s??{bandIds:null,sampling:null}};if(Object.keys(u).forEach((h=>{u[h]==null&&delete u[h]})),n){if(!this.supportedFormats.has(n))throw new C("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new C("rasterfactory:open",`cannot open raster: ${t}`);const h=new(E.get(n)).constructor(u);return await h.open({signal:e.signal}),h}const l=Array.from(E.keys()).filter((h=>h!=="CovJSON"&&h!=="Memory"));let o=0;const c=()=>{if(n=l[o++],!n||n==="CRF")return null;const h=new(E.get(n)).constructor(u);return h.open({signal:e.signal}).then((()=>h)).catch((()=>c()))};return c()}static register(e,t,s){E.has(e.toUpperCase())||E.set(e.toUpperCase(),{desc:t,constructor:s})}}let N=class extends He(Ge(We(qe(dt(Ve(ct(ft(Ye(Xe(Ke(Ze(Qe.ClonableMixin(et))))))))))))){constructor(...a){super(...a),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=tt((async(e,t,s)=>{const{save:i,saveAs:r}=await nt(()=>import("./imageryUtils-BbOSa-rW.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(e){case se.SAVE:return i(this,t);case se.SAVE_AS:return r(this,s,t)}}))}normalizeCtorArgs(a,e){return typeof a=="string"?{url:a,...e}:a}load(a){const e=a!=null?a.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},a).catch(st).then((()=>this._openRaster(e)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const a=[yt("Pixel Value"),wt("Raw Pixel Value")],e=this.raster?.rasterInfo??this.serviceRasterInfo,t=e?.attributeTable;if(t){const r=xt(t);a.push(...r)}const s=e?.dataType,i=e?.multidimensionalInfo;if((s==="vector-magdir"||s==="vector-uv")&&i!=null){const r=i.variables[0].unit?.trim(),n=It(r),u=bt();a.push(n,u)}if(i){const r=vt(i);a.push(...r)}return a}createPopupTemplate(a){const{rasterFields:e}=this,t=a?.visibleFieldNames??new Set(e.map((({name:r})=>r)).filter((r=>r!==St.rawServicePixelValue))),s=at({fields:e,title:this.title},{...a,visibleFieldNames:t}),{rasterInfo:i}=this.raster;return s?.fieldInfos&&i&&Tt(s.fieldInfos,i),s}async generateRasterInfo(a,e){if(a=it(Me,a),await this.load(),!a||a.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:t}=await this._openFunctionRaster(a,e);return t}catch(t){throw t instanceof C?t:new C("imagery-tile-layer","the given raster function is not supported")}}async save(a){return this._debouncedSaveOperations(se.SAVE,a)}async saveAs(a,e){return this._debouncedSaveOperations(se.SAVE_AS,e,a)}write(a,e){const t=this._primaryRasters[0]??this.raster;if(this.loaded?t.datasetFormat==="RasterTileServer"&&(t.tileType==="Raster"||t.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(a,e);if(e?.messages){const s=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new C("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}async _openRaster(a){let e=!1;if(this.raster)await this._openFromRaster(this.raster,a),e=Rt(this.raster),!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:s,rasterFunction:i,source:r}=this;if(!s&&!r)throw new C("imagery-tile-layer:open","missing url or source parameter");r?await this._openFromSource(r,a):i?await this._openFromUrlWithRasterFunction(s,i,a):await this._openFromUrl(s,a)}const t=this.raster.rasterInfo;if(!t)throw new C("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?t:this._primaryRasters[0].rasterInfo),this._set("spatialReference",t.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const s=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(s,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(rt((()=>this.customParameters),(s=>{this.raster&&(this.raster.ioConfig.customFetchParameters=s)})))}async _openFromRaster(a,e){a.rasterInfo||await a.open({signal:e}),this._primaryRasters=_t(a),this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(a,e,t){const s=[a];e&&Ut(e.toJSON(),s);const i=await Promise.all(s.map((n=>de.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:t})))),r=i.findIndex((n=>n==null));if(r>-1)throw new C("imagery-tile-layer:open",`cannot open raster: ${s[r]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(a,e){const t=await de.open({url:a,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(t==null)throw new C("imagery-tile-layer:open",`cannot open raster: ${a}`);this._primaryRasters=[t],this.raster=t}async _openFromSource(a,e){const t="the tiled imagery data source is not supported",s=a.type?.toLowerCase()==="coverage"?"CovJSON":a.extent&&a.pixelBlock?"MEMORY":null;if(!s)throw new C("imagery-tile-layer:open",t);s==="MEMORY"&&(a={...a,pixelBlock:void 0,pixelBlocks:[a.pixelBlock]});const i=await de.open({url:"",source:a,datasetFormat:s,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new C("imagery-tile-layer:open",t);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(a,e){const t={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((r=>t[r.url]=r));const s=jt(a.functionDefinition?.toJSON()??a.toJSON(),t),i=new ut({rasterFunction:s});return await i.open(e),i}async _initializeWithFunctionRaster(a,e){try{this.raster=await this._openFunctionRaster(a,e)}catch(t){t instanceof C&&me.getLogger(this).error("imagery-tile-layer:open",t.message),me.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};T([O({clonable:!1})],N.prototype,"_primaryRasters",void 0),T([O(ot)],N.prototype,"legendEnabled",void 0),T([O({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],N.prototype,"isReference",void 0),T([O({type:["show","hide"]})],N.prototype,"listMode",void 0),T([O({json:{read:!0,write:!0}})],N.prototype,"blendMode",void 0),T([O({type:Me,json:{name:"renderingRule",write:!0}})],N.prototype,"rasterFunction",void 0),T([O()],N.prototype,"sourceJSON",void 0),T([O({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],N.prototype,"version",void 0),T([O({readOnly:!0,json:{read:!1}})],N.prototype,"type",void 0),T([O({type:["ArcGISTiledImageServiceLayer"]})],N.prototype,"operationalLayerType",void 0),T([O({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(a,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(a,e,t){e[t]=!a}}}})],N.prototype,"popupEnabled",void 0),T([O({type:lt,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],N.prototype,"popupTemplate",void 0),T([O({readOnly:!0})],N.prototype,"defaultPopupTemplate",null),T([O({readOnly:!0,type:[Se]})],N.prototype,"fields",void 0),T([O({readOnly:!0,type:[Se]})],N.prototype,"rasterFields",null),T([O({constructOnly:!0})],N.prototype,"source",void 0),N=T([Y("esri.layers.ImageryTileLayer")],N);const Os=N;export{Os as default};
