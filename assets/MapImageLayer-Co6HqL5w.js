const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-B7HFPdb-.js","assets/utils-C3YVZvrv.js","assets/ScaleRangeLayer-CkcnxI7v.js","assets/originUtils-DLWi2i4_.js","assets/jsonContext-CTbYPcIV.js","assets/portalItemUtils-Beiwx9a8.js","assets/saveUtils-BecUOFrQ.js"])))=>i.map(i=>d[i]);
import{aU as w,aV as O,fl as $,aX as _,fm as E,a6 as P,fi as v,fg as f,fn as b,fo as T,e$ as A,ae as g,ag as L,cC as F,fp as M,d as S,S as R,aW as V,_ as j,W as i,X as n,fq as x,a2 as N,a3 as U,Y as q,fr as J}from"./ScaleRangeLayer-CkcnxI7v.js";import{S as k}from"./MultiOriginJSONSupport-CaqF7aws.js";import{i as W}from"./APIKeyMixin-DFbvM0Dh.js";import{m as z,f as C,a as D}from"./SublayersOwner-CzMoomRH.js";import{l as G}from"./ArcGISService-DbN9TSbx.js";import{e as H}from"./CustomParametersMixin-CDyaxzvT.js";import{b as Z,y as B}from"./OperationalLayer-5tD0PN5k.js";import{j as K}from"./PortalLayer-Co6vzNlT.js";import{f as X}from"./RefreshableLayer-BE14VVV_.js";import{c as Y}from"./TemporalLayer-GeYjtTDS.js";import{t as Q}from"./imageBitmapUtils-Cn3mdSk2.js";import{t as ee}from"./versionUtils-oVtrlNPT.js";import{A as y}from"./interfaces-CL2NbQte.js";import"./portalItemUtils-Beiwx9a8.js";import"./QueryTask-CTuEniME.js";import"./infoFor3D-VMSlSy0z.js";import"./executeForIds-CiMwub9m.js";import"./query-DkqYP_IY.js";import"./pbfQueryUtils-Di7dfwDw.js";import"./pbf-D5IDxXWF.js";import"./OptimizedFeature-BRiTb9Ij.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./queryZScale-oYjTlJxk.js";import"./executeQueryJSON-BJJWnKxh.js";import"./FeatureSet-CvltAc3o.js";import"./featureConversionUtils-Diaz3NGZ.js";import"./OrderedLayer-DvxY4FBb.js";import"./OrderByInfo-CppKUrvh.js";import"./labelingInfo-B_JAFYyH.js";import"./NormalizationBinParametersMixin-CZeWOf7T.js";import"./labelUtils-xrhI_YuC.js";import"./FeatureType-Da-ejSqi.js";import"./FeatureTemplate-C8k7_l7R.js";import"./LayerFloorInfo-BSHESHAo.js";import"./Relationship-iA25-Pmk.js";import"./serviceCapabilitiesUtils-D_NhzN5b.js";import"./popupUtils-CF_QFtrk.js";import"./TimeInfo-EYJ4o0ml.js";let r=class extends w(Y(O(z(C(G(Z(K(k(X(W(H(V)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new $({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new _({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=E((async(t,p,s)=>{const{save:l,saveAs:o}=await j(()=>import("./mapImageLayerUtils-B7HFPdb-.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(t){case y.SAVE:return l(this,p);case y.SAVE_AS:return o(this,s,p)}}))}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(P).then((()=>this._fetchService(t)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const p=t.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,p,s){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten((({sublayers:a})=>a&&a.toArray().reverse())).toArray();let o=!1;const m=v(s.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===f.PORTAL_ITEM){const a=this.createSublayersForOrigin("service").sublayers;o=b(l,a,f.SERVICE)}else if(m>f.PORTAL_ITEM){const a=this.createSublayersForOrigin("portal-item");o=b(l,a.sublayers,v(a.origin)),h=a.originWithPartialOverrides}}const d=[],c={writeSublayerStructure:o,...s,minimumWritableOrigin:h};let u=o||this.hasVisibleLayersForOrigin(m);l.forEach((a=>{const I=a.write({},c);d.push(I),u=u||a.originOf("visible")==="user"})),d.some((a=>Object.keys(a).length>1))&&(t.layers=d),u&&(t.visibleLayers=l.filter((a=>a.visible)).map((a=>a.id)))}createExportImageParameters(e,t,p,s){const l=s?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=s?.floors??null,this._exportImageParameters.scale=T({extent:e,width:t})*l;const o=this._exportImageParameters.toJSON(),m=!s?.rotation||this.version<10.3?{}:{rotation:-s.rotation},h=e?.spatialReference,d=A(h);o.dpi*=l;const c={};if(s?.timeExtent){const{start:u,end:a}=s.timeExtent.toJSON();c.time=u&&a&&u===a?""+u:`${u??"null"},${a??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(c.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:d,imageSR:d,size:t+","+p,...o,...m,...c}}async fetchImage(e,t,p,s){const{data:l}=await this._fetchImage("image",e,t,p,s);return l}async fetchImageBitmap(e,t,p,s){const{data:l,url:o}=await this._fetchImage("blob",e,t,p,s);return Q(l,o,s?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await g(this.url,t),{extent:s,fullExtent:l,timeExtent:o}=p,m=s||l;return{fullExtent:m&&F.fromJSON(m),timeExtent:o&&L.fromJSON({start:o[0],end:o[1]})}}loadAll(){return M(this,(e=>{e(this.allSublayers),e(this.subtables)}))}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return ee(this,e)}async _fetchImage(e,t,p,s,l){const o={responseType:e,signal:l?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,p,s,l),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await g(m,o);return{data:h,url:m}}catch(h){throw R(h)?h:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:p}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};i([n(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),i([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),i([n()],r.prototype,"dpi",void 0),i([n()],r.prototype,"elevationInfo",void 0),i([n()],r.prototype,"gdbVersion",void 0),i([n()],r.prototype,"imageFormat",void 0),i([N("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),i([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),i([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),i([n()],r.prototype,"imageTransparency",void 0),i([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),i([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),i([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),i([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),i([n(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),i([n()],r.prototype,"sourceJSON",void 0),i([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),i([U("sublayers",{layers:{type:[D]},visibleLayers:{type:[J]}})],r.prototype,"writeSublayers",null),i([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),i([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),i([n(B)],r.prototype,"url",void 0),r=i([q("esri.layers.MapImageLayer")],r);const qe=r;export{qe as default};
