import{W as o,iY as z,iZ as E,i_ as J,a4 as Q,iE as X,e1 as G,iD as Z,bY as V,iF as tt,iG as et,iH as st,iI as it,iJ as ot,iK as rt,iL as at,cj as nt,i$ as pt,j0 as L}from"./ScaleRangeLayer-CkcnxI7v.js";import{r as dt}from"./vec3f32-WCVSSNPR.js";import{n as ht}from"./WGLContainer-FqqlXR4w.js";import{o as lt}from"./FeatureCommandQueue-B_cZeoI_.js";import{t as U}from"./utils-ehcGqGxa.js";import{j as ut,_ as P,y as ct,X as ft,c as x,e as vt,d as mt,w as yt,f as W,g as n,r as wt,U as xt,m as q,i as gt,P as F,v as _t,t as Mt}from"./GraphShaderModule-BGbPHaS4.js";import{e as St}from"./TechniqueType-pk2C5RYg.js";import{t as B}from"./VertexElementDescriptor-BLyltQyJ.js";class D extends gt{}o([W(0,x)],D.prototype,"pos",void 0),o([W(1,x)],D.prototype,"uv",void 0);class $t extends _t{}class K extends F{}o([n(wt)],K.prototype,"dvs",void 0);class m extends F{}o([n(x)],m.prototype,"perspective",void 0),o([n(x)],m.prototype,"texSize",void 0),o([n(P)],m.prototype,"wrapAroundShift",void 0),o([n(P)],m.prototype,"opacity",void 0),o([n(xt)],m.prototype,"texture",void 0);class w extends ut{constructor(){super(...arguments),this.type="OverlayShader"}vertex(e){const t=e.uv.divide(this.config.texSize),s=new P(1).add(ct(t,this.config.perspective)),i=new ft(e.pos.add(new x(this.config.wrapAroundShift,0)),1),r=this.transform.dvs.multiply(i);return{uv:t,glPosition:new vt(r.xy.multiply(s),0,s)}}fragment(e){const t=mt(this.config.texture,e.uv).multiply(this.config.opacity),s=new yt;return s.fragColor=t,s}}o([n(K)],w.prototype,"transform",void 0),o([n(m)],w.prototype,"config",void 0),o([z(0,q(D))],w.prototype,"vertex",null),o([z(0,q($t))],w.prototype,"fragment",null);class bt extends Mt{constructor(){super(...arguments),this.type=St.Overlay,this._mesh=null,this.shaders={overlay:new w}}render(e,t){const{context:s,painter:i}=e,r=this._getMesh(e,t);i.setPipelineState(U);const{isWrapAround:p,wrapAroundShift:u}=t.config,c={...t.config,wrapAroundShift:0},f={shader:this.shaders.overlay,uniforms:{transform:t.transform,config:c},defines:null,optionalAttributes:null,useComputeBuffer:!1};i.setPipelineState({...U,stencil:{write:!1,test:{compare:J.EQUAL,op:{fail:E.KEEP,zFail:E.KEEP,zPass:E.REPLACE},ref:0,mask:255}}}),i.submitDrawMeshUntyped(s,f,r),p&&(c.wrapAroundShift=u,i.submitDrawMeshUntyped(s,f,r))}shutdown(){Q(this._mesh)}_getMesh(e,t){const{context:s}=e;if(this._mesh){const i=this._mesh.vertexBuffers.get("positions");if(!i)throw new Error("Buffer not found");i.buffer.setData(t.position)}else{const i=t.index!=null?t.index.length:t.position.length/2;this._mesh=new lt(s,{vertex:{positions:{data:t.position,attributes:[new B("pos",2,G.FLOAT,0,8)]},uvs:{data:t.tex,attributes:[new B("uv",2,G.UNSIGNED_SHORT,0,4)]}},index:t.index!=null?{index:{data:t.index}}:void 0,groups:[{index:t.index!=null?"index":void 0,primitive:X.TRIANGLE_STRIP}],parts:[{group:0,start:0,count:i}]})}return this._mesh}}class It extends ht{constructor(){super(...arguments),this._viewStateId=-1,this._dvsMat3=Z(),this._overlayTechnique=new bt}get dvsMat3(){return this._dvsMat3}beforeRender(e){this._updateMatrices(e),this._updateOverlays(e,this.children);for(const t of this.children)t.beforeRender(e)}doRender(e){if(e.drawPhase!==V.MAP||!this.visible)return;super.doRender(e);const t=this._overlayTechnique;for(const s of this.children)s.draw(e,t)}onDetach(){this._overlayTechnique.shutdown()}_updateMatrices(e){const{state:t}=e,{id:s,size:i,pixelRatio:r,resolution:p,rotation:u,viewpoint:c,displayMat3:f}=t;if(this._viewStateId===s)return;const g=L(u),d=r*i[0],v=r*i[1];this._localOrigin=c.targetGeometry.clone();const{x:y,y:S}=this._localOrigin,_=tt(y,t.spatialReference);this._localOrigin.x=_,this._localOrigin.y=S;const $=p*d,b=p*v,a=et(this._dvsMat3);st(a,a,f),it(a,a,ot(d/2,v/2)),rt(a,a,dt(d/$,-v/b,1)),at(a,a,-g),this._viewStateId=s}_updateOverlays(e,t){const{state:s}=e,{rotation:i,spatialReference:r,worldScreenWidth:p,size:u,viewpoint:c}=s,f=this._localOrigin;let g,d=0;const v=nt(r);if(v&&r.isWrappable){const y=u[0],S=u[1],_=L(i),$=Math.abs(Math.cos(_)),b=Math.abs(Math.sin(_)),a=Math.round(y*$+S*b),[j,C]=v.valid,h=pt(r),{x:I,y:N}=c.targetGeometry,Y=[I,N],O=[0,0];s.toScreen(O,Y);const M=[0,0];let R;R=a>p?.5*p:.5*a;const T=Math.floor((I+.5*h)/h),H=j+T*h,k=C+T*h,A=[O[0]+R,0];s.toMap(M,A),M[0]>k&&(d=h),A[0]=O[0]-R,s.toMap(M,A),M[0]<H&&(d=-h),g={worldWidth:h,xBounds:[j,C]}}for(const y of t)y.updateDrawCoords(f,d,s,g)}}export{It as u};
