import{W as s,X as o,Y as l,cY as u,d as m,gO as h,O as d,eE as y}from"./ScaleRangeLayer-CkcnxI7v.js";import{g as c}from"./FeatureSet-CvltAc3o.js";import{n as _,c as g}from"./FeatureLayerView2D-cjK-Z-3C.js";import{d as f}from"./FeatureFilter-Dx124Zfc.js";import"./featureConversionUtils-Diaz3NGZ.js";import"./OptimizedFeature-BRiTb9Ij.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./labelingInfo-B_JAFYyH.js";import"./NormalizationBinParametersMixin-CZeWOf7T.js";import"./labelUtils-xrhI_YuC.js";import"./timeSupport-DfKIafrl.js";import"./AttributeBinsFeatureSet-WtwH5Wdu.js";import"./AttributeBinsQuery-DRBQwKi8.js";import"./queryUtils-CVnyp2w-.js";import"./json-Wa8cmqdu.js";import"./FixedIntervalBinParameters-eTXa4F-h.js";import"./LayerView-C4qWnKoZ.js";import"./Container-BmB3kfi0.js";import"./layerViewUtils-7LirAzEv.js";import"./TechniqueInstance-DVVC-uuD.js";import"./UpdateTracking2D-DciXD9FG.js";import"./Utils-eM5oEcgf.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./FramebufferObject-CCZMtxkY.js";import"./ProgramTemplate-DuKm7wPA.js";import"./TileContainer-BekcfWbi.js";import"./WGLContainer-FqqlXR4w.js";import"./vec3f32-WCVSSNPR.js";import"./StyleDefinition-CUS6XBgd.js";import"./config-DHajyIwB.js";import"./earcut-D9gy186-.js";import"./FeatureCommandQueue-B_cZeoI_.js";import"./TechniqueType-pk2C5RYg.js";import"./GraphShaderModule-BGbPHaS4.js";import"./ShaderBuilder-G_dO87DI.js";import"./BindType-BBwFZqyN.js";import"./utils-Cemv36zb.js";import"./constants-BFLErLYb.js";import"./streamLayerUtils-CKwt2uXH.js";import"./QueueProcessor-x30S7ems.js";import"./CircularArray-CujHzHWW.js";import"./OrderByInfo-CppKUrvh.js";import"./SDFHelper-Cn-K75tR.js";import"./constants-B4mRqufT.js";import"./bundle-B2FM5W1M.js";import"./FeatureEffect-C66kJK_4.js";import"./popupUtils-Cs5aD5rv.js";import"./RefreshableLayerView-CFBVFi7F.js";const v=e=>{let t=class extends e{resume(){this._isUserPaused=!1,this.suspended||this._doResume()}pause(){this._isUserPaused=!0,this.suspended||this._doPause()}disconnect(){this._doDisconnect()}connect(){this._doConnect()}clear(){this._doClear()}constructor(...r){super(...r),this._isUserPaused=!1,this.filter=null}get connectionStatus(){return(this._isUserPaused||this.suspended)&&this._streamConnectionStatus==="connected"?"paused":this._streamConnectionStatus}_onSuspendedChange(r){r?this._doPause():this._isUserPaused||this._doResume()}};return s([o()],t.prototype,"_isUserPaused",void 0),s([o({readOnly:!0})],t.prototype,"connectionStatus",null),s([o({type:f})],t.prototype,"filter",void 0),t=s([l("esri.views.layers.StreamLayerView")],t),t};let n=class extends v(g){constructor(){super(...arguments),this.pipelineConnectionStatus="disconnected",this.pipelineErrorString=null}initialize(){this.addHandles([u((()=>this.layer.customParameters),(async e=>{(await this.getWorker()).streamMessenger.updateCustomParameters(e)})),this.layer.on("send-message-to-socket",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToSocket(e)})),this.layer.on("send-message-to-client",(async e=>{(await this.getWorker()).streamMessenger.sendMessageToClient(e),this._isUserPaused&&"type"in e&&e.type==="clear"&&this.incrementSourceRefreshVersion()})),u((()=>this.layer.purgeOptions),(()=>this._update())),u((()=>this.suspended),this._onSuspendedChange.bind(this))],"constructor"),this._doResume()}destroy(){this._doPause()}get connectionError(){return this.pipelineErrorString?new m("stream-controller",this.pipelineErrorString):null}on(e,t){if(Array.isArray(e))return h(e.map((i=>this.on(i,t))));const r=["data-received","message-received"].includes(e);r&&this.getWorker().then((i=>i.streamMessenger.enableEvent(e,!0)));const p=super.on(e,t),a=this;return d((()=>{p.remove(),r&&(a._workerProxy.closed||a.hasEventListener(e)||a.getWorker().then((i=>i.streamMessenger.enableEvent(e,!1))))}))}async queryLatestObservations(e,t){if(!(this.layer.timeInfo?.endField||this.layer.timeInfo?.startField||this.layer.timeInfo?.trackIdField))throw new m("streamlayer-no-timeField","queryLatestObservation can only be used with services that define a TrackIdField");const r=await this.getWorker();return _(r.features.executeQueryForLatestObservations(this._cleanUpQuery(e),t).then((p=>{const a=c.fromJSON(p);return a.features.forEach((i=>{i.layer=this.layer,i.sourceLayer=this.layer})),a})),new c({features:[]}))}detach(){super.detach(),this.pipelineConnectionStatus="disconnected"}async queryObjectIds(e,t){return(await super.queryObjectIds(e,t)).filter(y)}get _streamConnectionStatus(){return this.pipelineConnectionStatus}_doPause(){this._refreshInterval!=null&&(clearInterval(this._refreshInterval),this._refreshInterval=null)}_doResume(){this._refreshInterval==null&&(this._refreshInterval=setInterval((()=>this.incrementSourceRefreshVersion()),this.layer.updateInterval))}_doDisconnect(){this.getWorker().then((e=>e.streamMessenger.disconnect())),this._doPause()}_doConnect(){this.getWorker().then((e=>e.streamMessenger.connect())),this.resume()}_doClear(){this.getWorker().then((e=>e.streamMessenger.clear())),this._refreshInterval==null&&this.incrementSourceRefreshVersion()}_createClientOptions(){const e=super._createClientOptions(),t=this;return{...e,get container(){return t.featureContainer},setProperty:r=>{this.set(r.propertyName,r.value)}}}};s([o()],n.prototype,"pipelineConnectionStatus",void 0),s([o()],n.prototype,"pipelineErrorString",void 0),s([o({readOnly:!0})],n.prototype,"connectionError",null),s([o({readOnly:!0})],n.prototype,"_streamConnectionStatus",null),n=s([l("esri.views.2d.layers.StreamLayerView2D")],n);const de=n;export{de as default};
