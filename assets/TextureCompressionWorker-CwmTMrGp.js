import{_ as D,gO as S,jK as m}from"./index-C4I_fUP4.js";import{_ as A}from"./TextureFormat-1mYWTFa-.js";function R(){return C??=(async()=>{const t=await D(()=>import("./basis_encoder-CRZ0Ieq5.js"),[]),e=await t.default({locateFile:n=>S(`esri/libs/basisu/${n}`)});return e.initializeBasis(),e})(),C}let C;function b(){return E??=(async()=>await(await D(()=>import("./dxt_encoder-OwHxgVfW.js"),[])).default({locateFile:e=>S(`esri/libs/dxtEncoder/${e}`)}))(),E}let E,X,B,u=null,p=null;class w{constructor(e,n){this.internalFormat=e,this.compressedTexture=n}}async function q(t){let e;if(e=t.data instanceof ImageBitmap?O(t.data):U(t.data,t.width,t.height,t.components,t.needsFlip),t.hasS3TC){p||await g();const n=new Uint8Array(e.length);if(p?.encode(e,t.width,t.height,t.preMultiplyAlpha,n)){const r=H(n,!0),o=[n.buffer];return{result:new w(r?.internalFormat??null,r?.textureData??null),transferList:o}}return{result:new w(null,null)}}if(t.hasETC){if(u||await M(),t.preMultiplyAlpha&&!p&&await g(),t.preMultiplyAlpha){const i=new Uint8ClampedArray(e.length);p?.premultiply(new Uint8Array(e),t.width,t.height,i),e=i}const n=await x(e,t.width,t.height,t.hasMipmap),r=n?await F(n):null,o=r?.compressedTexture?.levels.map((i=>i.buffer))||[];return{result:new w(r?.internalFormat??null,r?.compressedTexture??null),transferList:o}}return{result:new w(null,null)}}async function M(){u||(u=await(X??=R()))}async function g(){p||(p=await(B??=b()))}async function x(t,e,n,r,o=255,i=0,s=!1,l=!1){if(!u)return null;const a=new u.BasisEncoder;a.setPerceptual(!l),a.setCheckForAlpha(!0),a.setForceAlpha(!1),a.setRenormalize(l),a.setMipGen(r),a.setMipSRGB(!l),a.setCreateKTX2File(!0),a.setKTX2SRGBTransferFunc(!l),a.setQualityLevel(o),a.setCompressionLevel(i);const c=new Uint8Array(t.byteLength);a.setSliceSourceImage(0,new Uint8Array(t),e,n,s);const f=a.encode(c),d=new Uint8Array(c.buffer,0,f),h=new u.KTX2File(new Uint8Array(d));return h.isValid()?(a.delete(),d):(h.close(),h.delete(),a.delete(),null)}async function F(t){if(!u)return new w(null,null);const e=new u.KTX2File(new Uint8Array(t));e.startTranscoding();const[n,r]=e.getHasAlpha()?[A.ETC2_RGBA,m.COMPRESSED_RGBA8_ETC2_EAC]:[A.ETC1_RGB,m.COMPRESSED_RGB8_ETC2],o=e.getLevels(),i=[];for(let s=0;s<o;s++)i.push(new Uint8Array(e.getImageTranscodedSizeInBytes(s,0,0,n))),e.transcodeImage(i[s],s,0,0,n,0,-1,-1);return e.close(),e.delete(),{internalFormat:r,compressedTexture:{type:"compressed",levels:i}}}function O(t){const e=new OffscreenCanvas(t.width,t.height),n=e.getContext("2d");return n.drawImage(t,0,0),n.getImageData(0,0,e.width,e.height).data}function U(t,e,n,r,o){const i=new Uint8ClampedArray(t).subarray(0,e*n*r);if(!o)return i;const s=new Uint8ClampedArray(i.length),l=e*r;for(let a=0;a<n;a++){const c=a*l,f=(n-a-1)*l;s.set(i.subarray(c,c+l),f)}return s}const G=31,v=1,I=2,P=3,L=4,K=7,k=21,z=131072;function T(t){return t.charCodeAt(0)+(t.charCodeAt(1)<<8)+(t.charCodeAt(2)<<16)+(t.charCodeAt(3)<<24)}const $=T("DXT1"),V=T("DXT3"),j=T("DXT5");function H(t,e){const n=new Int32Array(t.buffer,t.byteOffset,G);let r,o;switch(n[k]){case $:r=8,o=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case V:r=16,o=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case j:r=16,o=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let i=1,s=n[L],l=n[P];(3&s||3&l)&&(s=s+3&-4,l=l+3&-4);const a=s,c=l;let f,d;n[I]&z&&e!==!1&&(i=Math.max(1,n[K]));let h=t.byteOffset+n[v]+4;const _=[];for(let y=0;y<i;++y)d=(s+3>>2)*(l+3>>2)*r,f=new Uint8Array(t.buffer,h,d),_.push(f),h+=d,s=Math.max(1,s>>1),l=Math.max(1,l>>1);return{textureData:{type:"compressed",levels:_},internalFormat:o,width:a,height:c}}export{w as TextureCompressionWorkerOutput,q as compress,x as compressRGBADataToKTX2,F as createTextureDataKTX2,M as initializeBasisEncoder,g as initializeDXTEncoder};
