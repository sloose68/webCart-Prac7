import{d6 as _,d7 as S,eX as T,eY as b,f6 as w,eZ as O,eW as $,f8 as R,f7 as W,d9 as U,br as I,bk as m,I as L,aa as c,fH as P,fr as j,d as h,p as k,fI as A,ex as B,ei as M,d8 as N,a2 as a,a3 as o,c2 as C,fl as D,eL as J,f5 as q,a4 as G}from"./index-Ccrt8twN.js";import{p as V}from"./ArcGISCachedService-CecZv-Th.js";import{m as x,f as E,a as H}from"./SublayersOwner-DPtXwGyr.js";import{o as f}from"./imageBitmapUtils-BYccVVA7.js";import"./TileInfoTilemapCache-BRAYfPuh.js";import"./TilemapCache-tLANyS89.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./QueryTask-CvBScb0A.js";import"./executeForIds-D7x5rLPc.js";import"./query-Bf9mJ-D6.js";import"./pbfQueryUtils-D9FOGJYH.js";import"./pbf-BvFhjHwb.js";import"./OptimizedFeature-BvRAcurs.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./executeQueryJSON-CR8_qrpj.js";import"./featureConversionUtils-C8t9cW6d.js";var y;const v=["Canvas/World_Dark_Gray_Base","Canvas/World_Dark_Gray_Reference","Canvas/World_Light_Gray_Base","Canvas/World_Light_Gray_Reference","Elevation/World_Hillshade","Elevation/World_Hillshade_Dark","Ocean/World_Ocean_Base","Ocean/World_Ocean_Reference","Ocean_Basemap","Reference/World_Boundaries_and_Places","Reference/World_Boundaries_and_Places_Alternate","Reference/World_Transportation","World_Imagery","World_Street_Map","World_Topo_Map"];let s=y=class extends _(S(x(V(E(T(b(w(O($(R(W(N)))))))))))){constructor(...e){super(...e),this.listMode="show",this.elevationInfo=new U({mode:"on-the-ground"}),this.isReference=null,this.operationalLayerType="ArcGISTiledMapServiceLayer",this.resampling=!0,this.sourceJSON=null,this.spatialReference=null,this.path=null,this.sublayers=null,this.type="tile",this.url=null}normalizeCtorArgs(e,r){return typeof e=="string"?{url:e,...r}:e}load(e){const r=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(I).then((()=>this._fetchService(r)))),Promise.resolve(this)}get attributionDataUrl(){const e=this.parsedUrl?.path.toLowerCase();return e?this._getDefaultAttribution(this._getMapName(e)):null}readSpatialReference(e,r){return(e=e||r.tileInfo?.spatialReference)&&m.fromJSON(e)}writeSublayers(e,r,t,i){if(!this.loaded||!e)return;const n=e.slice().reverse().flatten((({sublayers:p})=>p&&p.toArray().reverse())).toArray(),l=[],u={writeSublayerStructure:!1,...i};n.forEach((p=>{const d=p.write({},u);l.push(d)})),l.some((p=>Object.keys(p).length>1))&&(r.layers=l)}get tileServers(){return this._getDefaultTileServers(this.parsedUrl?.path)}castTileServers(e){return Array.isArray(e)?e.map((r=>L(r).path)):null}fetchTile(e,r,t,i={}){const{signal:n}=i,l=this.getTileUrl(e,r,t),u={responseType:"image",signal:n,query:{...this.refreshParameters}};return c(l,u).then((p=>p.data))}async fetchImageBitmapTile(e,r,t,i={}){const{signal:n}=i;if(this.fetchTile!==y.prototype.fetchTile){const d=await this.fetchTile(e,r,t,i);return f(d,e,r,t,n)}const l=this.getTileUrl(e,r,t),u={responseType:"blob",signal:n,query:{...this.refreshParameters}},{data:p}=await c(l,u);return f(p,e,r,t,n)}getTileUrl(e,r,t){const i=!this.capabilities.operations.supportsTileMap&&this.supportsBlankTile,n=P({...this.parsedUrl?.query,blankTile:!i&&null,...this.customParameters,token:this.apiKey}),l=this.tileServers;return`${l&&l.length?l[r%l.length]:this.parsedUrl?.path}/tile/${e}/${r}/${t}${n?"?"+n:""}`}loadAll(){return j(this,(e=>{e(this.allSublayers)}))}_fetchService(e){return new Promise(((r,t)=>{if(this.sourceJSON){if(this.sourceJSON.bandCount!=null&&this.sourceJSON.pixelSizeX!=null)throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");return void r({data:this.sourceJSON})}if(!this.parsedUrl)throw new h("tile-layer:undefined-url","layer's url is not defined");const i=k(this.parsedUrl.path);if(i!=null&&i.serverType==="ImageServer")throw new h("tile-layer:unsupported-url","use ImageryTileLayer to open a tiled image service");c(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},responseType:"json",signal:e}).then(r,t)})).then((r=>{let t=this.url;if(r.ssl&&(t=this.url=t.replace(/^http:/i,"https:")),this.sourceJSON=r.data,this.read(r.data,{origin:"service",url:this.parsedUrl}),this.version===10.1&&!A(t))return this._fetchServerVersion(t,e).then((i=>{this.read({currentVersion:i})})).catch((()=>{}))}))}_fetchServerVersion(e,r){if(!B(e))return Promise.reject();const t=e.replace(/(.*\/rest)\/.*/i,"$1")+"/info";return c(t,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:r}).then((i=>{if(i.data?.currentVersion)return i.data.currentVersion;throw new h("tile-layer:version-not-available","Server did not provide a version")}))}_getMapName(e){const r=e.match(/^(?:https?:)?\/\/(server\.arcgisonline\.com|services\.arcgisonline\.com|ibasemaps-api\.arcgis\.com)\/arcgis\/rest\/services\/([^/]+(\/[^/]+)*)\/mapserver/i);return r?r[2]:void 0}_getDefaultAttribution(e){if(e==null)return null;let r;e=e.toLowerCase();for(let t=0,i=v.length;t<i;t++)if(r=v[t],r.toLowerCase().includes(e))return M("//static.arcgis.com/attribution/"+r);return null}_getDefaultTileServers(e){if(e==null)return[];const r=e.search(/^(?:https?:)?\/\/server\.arcgisonline\.com/i)!==-1,t=e.search(/^(?:https?:)?\/\/services\.arcgisonline\.com/i)!==-1;return r||t?[e,e.replace(r?/server\.arcgisonline/i:/services\.arcgisonline/i,r?"services.arcgisonline":"server.arcgisonline")]:[]}get hasOverriddenFetchTile(){return!this.fetchTile[g]}};a([o({readOnly:!0})],s.prototype,"attributionDataUrl",null),a([o({type:["show","hide","hide-children"]})],s.prototype,"listMode",void 0),a([o({json:{read:!0,write:!0}})],s.prototype,"blendMode",void 0),a([o()],s.prototype,"elevationInfo",void 0),a([o({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],s.prototype,"isReference",void 0),a([o({readOnly:!0,type:["ArcGISTiledMapServiceLayer"]})],s.prototype,"operationalLayerType",void 0),a([o({type:Boolean})],s.prototype,"resampling",void 0),a([o()],s.prototype,"sourceJSON",void 0),a([o({type:m})],s.prototype,"spatialReference",void 0),a([C("spatialReference",["spatialReference","tileInfo"])],s.prototype,"readSpatialReference",null),a([o({type:String,json:{origins:{"web-scene":{read:!0,write:!0}},read:!1}})],s.prototype,"path",void 0),a([o({readOnly:!0})],s.prototype,"sublayers",void 0),a([D("sublayers",{layers:{type:[H]}})],s.prototype,"writeSublayers",null),a([o({json:{read:!1,write:!1}})],s.prototype,"popupEnabled",void 0),a([o()],s.prototype,"tileServers",null),a([J("tileServers")],s.prototype,"castTileServers",null),a([o({readOnly:!0,json:{read:!1}})],s.prototype,"type",void 0),a([o(q)],s.prototype,"url",void 0),s=y=a([G("esri.layers.TileLayer")],s);const g=Symbol("default-fetch-tile");s.prototype.fetchTile[g]=!0;const pe=s;export{pe as default};
