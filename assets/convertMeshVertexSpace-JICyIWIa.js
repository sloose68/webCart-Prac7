import{ab as p,d as m,ah as s}from"./index-N-ot2pEg.js";import{p as a}from"./MeshVertexAttributes-DfuqQVJY.js";import{B as n}from"./vertexSpaceConversion-CFUXVdAF.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-Dpza2B2k.js";import"./computeTranslationToOriginAndRotation-CQ_rc3hr.js";import"./projectPointToVector-CFIQ8oNA.js";import"./meshVertexSpaceUtils-DnflTwUC.js";import"./MeshLocalVertexSpace-CZYfusQ-.js";import"./vec3-BunD1WMj.js";import"./BufferView-YkBrB5u0.js";import"./vec4-pP2dDyAM.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
