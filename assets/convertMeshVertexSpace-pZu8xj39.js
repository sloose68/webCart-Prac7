import{ab as p,d as m,ah as s}from"./index-DO5zGDFy.js";import{p as a}from"./MeshVertexAttributes-rVePjoyD.js";import{B as n}from"./vertexSpaceConversion-CUfeeBYD.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-CaVCUFwP.js";import"./computeTranslationToOriginAndRotation-7eQGGBSb.js";import"./projectPointToVector-BntUtADA.js";import"./meshVertexSpaceUtils-Bb8IoviT.js";import"./MeshLocalVertexSpace-COWcaa-l.js";import"./vec3-C1_LdcMY.js";import"./BufferView-C34xwGfY.js";import"./vec4-BktBw16h.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=n(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new a({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
