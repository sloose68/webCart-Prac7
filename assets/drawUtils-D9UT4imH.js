import{gf as j,bV as z,gg as A,aZ as G}from"./FeatureLayer-JSWtiqX3.js";function V(n,e,a,o){if(n.type==="point")return n.x+=e,n.y+=a,n.hasZ&&o!=null,n;if(n.type==="multipoint"){const x=n.points;for(let r=0;r<x.length;r++)x[r]=B(x[r],e,a,o);return n}if(n.type==="extent")return n.xmin+=e,n.xmax+=e,n.ymin+=a,n.ymax+=a,n;const m=j(n),t=n.type==="polyline"?n.paths:n.rings;for(let x=0;x<m.length;x++){const r=m[x];for(let s=0;s<r.length;s++)r[s]=B(r[s],e,a,o)}return"paths"in n?n.paths=t:n.rings=t,n}function I(n,e,a,o,m){const t=n.clone(),x=o.resolution;if(t.type==="point"){if(m)V(t,e*x,-a*x);else{const r=o.state.transform,s=o.state.inverseTransform,l=r[0]*t.x+r[2]*t.y+r[4],y=r[1]*t.x+r[3]*t.y+r[5];t.x=s[0]*(l+e)+s[2]*(y+a)+s[4],t.y=s[1]*(l+e)+s[3]*(y+a)+s[5]}return t}if(t.type==="multipoint"){if(m)V(t,e*x,-a*x);else{const r=t.points,s=o.state.transform,l=o.state.inverseTransform;for(let y=0;y<r.length;y++){const c=r[y],p=s[0]*c[0]+s[2]*c[1]+s[4],v=s[1]*c[0]+s[3]*c[1]+s[5],f=l[0]*(p+e)+l[2]*(v+a)+l[4],u=l[1]*(p+e)+l[3]*(v+a)+l[5];r[y]=b(c,f,u)}}return t}if(t.type==="extent"){if(m)V(t,e*x,-a*x);else{const r=o.state.transform,s=o.state.inverseTransform,l=r[0]*t.xmin+r[2]*t.ymin+r[4],y=r[1]*t.xmin+r[3]*t.ymin+r[5],c=r[0]*t.xmax+r[2]*t.ymax+r[4],p=r[1]*t.xmax+r[3]*t.ymax+r[5];t.xmin=s[0]*(l+e)+s[2]*(y+a)+s[4],t.ymin=s[1]*(l+e)+s[3]*(y+a)+s[5],t.xmax=s[0]*(c+e)+s[2]*(p+a)+s[4],t.ymax=s[1]*(c+e)+s[3]*(p+a)+s[5]}return t}if(m)V(t,e*x,-a*x);else{const r=j(t),s=t.type==="polyline"?t.paths:t.rings,l=o.state.transform,y=o.state.inverseTransform;for(let c=0;c<r.length;c++){const p=r[c];for(let v=0;v<p.length;v++){const f=p[v],u=l[0]*f[0]+l[2]*f[1]+l[4],h=l[1]*f[0]+l[3]*f[1]+l[5],M=y[0]*(u+e)+y[2]*(h+a)+y[4],g=y[1]*(u+e)+y[3]*(h+a)+y[5];p[v]=b(f,M,g)}}"paths"in t?t.paths=s:t.rings=s}return t}function J(n,e,a,o){if(n.type==="point"){const{x:f,y:u}=n,h=o?o[0]:f,M=o?o[1]:u,g=n.clone(),T=(f-h)*e+h,i=(u-M)*a+M;return g.x=T,g.y=i,g}if(n.type==="multipoint"){const f=j(n),u=z(),[h,M,g,T]=A(u,[f]),i=o?o[0]:(h+g)/2,q=o?o[1]:(T+M)/2,Z=n.clone(),k=Z.points;for(let d=0;d<k.length;d++){const w=k[d],[C,D]=w,E=(C-i)*e+i,F=(D-q)*a+q;k[d]=b(w,E,F)}return Z}if(n.type==="extent"){const{xmin:f,xmax:u,ymin:h,ymax:M}=n,g=o?o[0]:(f+u)/2,T=o?o[1]:(M+h)/2,i=n.clone();if(i.xmin=(f-g)*e+g,i.ymax=(M-T)*a+T,i.xmax=(u-g)*e+g,i.ymin=(h-T)*a+T,i.xmin>i.xmax){const q=i.xmin,Z=i.xmax;i.xmin=Z,i.xmax=q}if(i.ymin>i.ymax){const q=i.ymin,Z=i.ymax;i.ymin=Z,i.ymax=q}return i}const m=j(n),t=z(),[x,r,s,l]=A(t,m),y=o?o[0]:(x+s)/2,c=o?o[1]:(l+r)/2,p=n.clone(),v=p.type==="polyline"?p.paths:p.rings;for(let f=0;f<m.length;f++){const u=m[f];for(let h=0;h<u.length;h++){const M=u[h],[g,T]=M,i=(g-y)*e+y,q=(T-c)*a+c;v[f][h]=b(M,i,q)}}return"paths"in p?p.paths=v:p.rings=v,p}function K(n,e,a,o,m,t){const x=Math.sqrt((a-n)*(a-n)+(o-e)*(o-e));return Math.sqrt((m-n)*(m-n)+(t-e)*(t-e))/x}function L(n,e,a,o=!1){const m=Math.atan2(e.y-a.y,e.x-a.x)-Math.atan2(n.y-a.y,n.x-a.x),t=Math.atan2(Math.sin(m),Math.cos(m));return o?t:G(t)}function B(n,e,a,o){return b(n,n[0]+e,n[1]+a,n[2]!=null&&o!=null?n[2]+o:void 0)}function b(n,e,a,o){const m=[e,a];return n.length>2&&m.push(n[2]),n.length>3&&m.push(n[3]),m}export{K as a,I as i,L as m,J as s};
