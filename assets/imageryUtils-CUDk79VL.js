import{P as n,$ as c}from"./utils-CjMZHEOD.js";import{t as p}from"./rasterFieldUtils-Cjx32SLS.js";import{l as u,g,f as s,u as v}from"./index-DO5zGDFy.js";import"./originUtils-g6LU6MiT.js";import"./jsonContext-r92RYpBI.js";import"./saveUtils-foTgqyXp.js";const y="Image Service",f="imagery-layer-save",d="imagery-layer-save-as",T="imagery-tile-layer-save",I="imagery-tile-layer-save-as",l="WCS",w="wcs-layer-save",x="wcs-layer-save-as";function m(e){if(e.type==="imagery"||e.type==="wcs")return{isValid:!0};const{raster:r}=e,a=p(r)[0];return{isValid:a?.datasetFormat==="RasterTileServer"&&(a.tileType==="Raster"||a.tileType==="Map"),errorMessage:"imagery tile layer should be created from a tiled image service."}}function o(e){const r=e.layerJSON;return Promise.resolve(r&&Object.keys(r).length?r:null)}async function A(e,r){const{parsedUrl:a,title:t,fullExtent:i}=e;r.url=a.path,r.title||=t;try{r.extent=await u(i)}catch{r.extent=void 0}g(r,s.METADATA),v(r,s.TILED_IMAGERY,e.type==="imagery-tile")}async function S(e,r){const a=e.type==="imagery"?f:e.type==="imagery-tile"?T:w,t=e.type==="wcs"?l:y;return n({layer:e,itemType:t,validateLayer:m,createItemData:o,errorNamePrefix:a},r)}async function L(e,r,a){const t=e.type==="imagery"?d:e.type==="imagery-tile"?I:x,i=e.type==="wcs"?l:y;return c({layer:e,itemType:i,validateLayer:m,createItemData:o,errorNamePrefix:t,newItem:r,setItemProperties:A},a)}export{S as save,L as saveAs};
