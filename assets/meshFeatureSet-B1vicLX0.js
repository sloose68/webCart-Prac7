import{eM as d,D as h,di as l,c8 as S,ai as g,bk as D,ay as M}from"./index-C4I_fUP4.js";import y from"./Mesh-CTPLIMll.js";import{n as N,i as F}from"./External-2UVW05AR.js";import{n as T,i as I}from"./meshFeatureAttributes-BrLpWAFC.js";import"./axisAngleDegrees-BGKfJjkf.js";import"./quat-g8RUvCjX.js";import"./mat3f64-B5o_lm6j.js";import"./quatf64-aQ5IuZRd.js";import"./MeshComponent-Db9kxjmO.js";import"./meshProperties-Cj6q1fp6.js";import"./MeshLocalVertexSpace-DXz1kVLw.js";import"./MeshTransform-Dkgytfn3.js";import"./mat4f64-q_b6UJoq.js";import"./MeshVertexAttributes-lnGaPRPU.js";import"./meshVertexSpaceUtils-PdvDqnv9.js";import"./triangulationUtils-ZMq7UxwS.js";import"./earcut-D9gy186-.js";import"./Indices-C78i4sDe.js";import"./plane-BevxFgKZ.js";import"./vectorStacks-xHxTx1Ui.js";import"./deduplicate-D7pKrZNk.js";import"./projectPointToVector-QT0V0Ob9.js";import"./vertexSpaceConversion-C3VgZxe6.js";import"./spatialReferenceEllipsoidUtils-BA1JfM09.js";import"./computeTranslationToOriginAndRotation-BCvC8w5A.js";import"./vec3-BRpBFMJd.js";import"./BufferView-D6JhfiNJ.js";import"./vec4-DZkVPIFz.js";const b=()=>h.getLogger("esri.rest.support.meshFeatureSet");function at(t,s,e){const r=e.features;e.features=[],delete e.geometryType;const o=g.fromJSON(e);if(o.geometryType="mesh",!e.assetMaps)return o;const n=O(s,e.assetMaps),i=t.sourceSpatialReference??D.WGS84,m=e.globalIdFieldName,{outFields:a}=t,c=a!=null&&a.length>0?w(a.includes("*")?null:new Set(a)):()=>({});for(const u of r){const p=L(u,m,i,s,n);o.features.push(new M({geometry:p,attributes:c(u)}))}return o}function w(t){return({attributes:s})=>{if(!s)return{};if(!t)return s;for(const e in s)t.has(e)||delete s[e];return s}}function L(t,s,e,r,o){const n=t.attributes[s],i=o.get(n);if(i==null||!t.geometry)return null;const m=T(t.attributes,e,r.transformFieldRoles),a=S.fromJSON(t.geometry);a.spatialReference=e;const c=I(t.attributes,r.transformFieldRoles),u=e.isGeographic?"local":"georeferenced",p=$(i);return p?y.createWithExternalSource(m,p,{extent:a,transform:c,vertexSpace:u,unitConversionDisabled:!0}):y.createIncomplete(m,{extent:a,transform:c,vertexSpace:u})}var f;function O(t,s){const e=new Map;for(const r of s){const o=r.parentGlobalId;if(o==null)continue;const n=r.assetName,i=r.assetType,m=r.assetHash,a=r.assetURL,c=r.conversionStatus,u=r.seqNo,p=d(i,t.supportedFormats);if(!p){b().error("mesh-feature-set:unknown-format",`Service returned an asset of type ${i}, but it does not list it as a supported type`);continue}const E=l(e,o,(()=>({files:new Map})));l(E.files,n,(()=>({name:n,type:i,mimeType:p,status:P(c),parts:[]}))).parts[u]={hash:m,url:a}}return e}function $(t){const s=Array.from(t.files.values()),e=new Array;for(const r of s){if(r.status!==f.COMPLETED)return null;const o=new Array;for(const n of r.parts){if(!n)return null;o.push(new N(n.url,n.hash))}e.push(new F(r.name,r.mimeType,o))}return{type:"service",assets:e}}function P(t){switch(t){case"COMPLETED":case"SUBMITTED":return f.COMPLETED;case"INPROGRESS":return f.PENDING;default:return f.FAILED}}(function(t){t[t.FAILED=0]="FAILED",t[t.PENDING=1]="PENDING",t[t.COMPLETED=2]="COMPLETED"})(f||(f={}));export{O as assetMapFromAssetMapsJSON,L as extractMesh,at as meshFeatureSetFromJSON};
